{"version":3,"sources":["webpack:///webpack/bootstrap d5fa7cdd55850c5c3c7c","webpack:///./src/client/InputManager.ts","webpack:///./src/lib/math/Vector2.ts","webpack:///./src/game/interfaces/CollideAble.ts","webpack:///./src/tetris/game.ts","webpack:///./src/tetris/Tetris.ts","webpack:///./src/tetris/Player.ts","webpack:///./src/tetris/Arena.ts","webpack:///./src/lib/observer/Observable.ts","webpack:///./src/tetris/Piece.ts","webpack:///./src/lib/collision/MatrixCollisionManager.ts","webpack:///./src/client/Settings.ts","webpack:///./src/lib/math/Matrix.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Observable_1","Actions","default","[object Object]","settings","super","this","inputMap","keyBoard","init","initializeTouchHandler","touches","start","move","window","addEventListener","event","key","state","notify","button","document","getElementById","el","handleTouchStart","handleTouchMove","handleTouchEnd","preventDefault","touchstartX","touchstartY","toucheMoveX","touchMoveY","thisInstance","evt","pageX","pageY","reset","changedTouches","length","Vector2","x","y","v1","v2","vector","scalar","Error","_x","_y","Math","sqrt","magnitude","mag","divide","max","floor","normalize","multiply","pow","EntityType","Tetris_1","InputManager_1","Settings_1","Piece_1","inputManager","canvas","tetris","addPlayer","arena","matrix","mArray","register","players","Player_1","Arena_1","colors","context","getContext","playing","lastTime","scale","playerId","playerName","piece","push","run","offset","forEach","row","value","fillStyle","fillRect","timeStamp","deltaTime","update","render","requestAnimationFrame","animationCallback","bind","player","dropCounter","dropInterval","drop","width","height","drawMatrix","postition","position","id","score","LEFT","RIGHT","DOWN","ROTATE_LEFT","rotate","ROTATE_RIGHT","Matrix_1","Vector2_1","array","Array","fill","rowCount","outer","splice","unshift","_observers","_state","observer","filter","obs","observers","CollideAble_1","MatrixCollisionManager_1","types","I","L","J","O","Z","S","T","setRandom","collidesWith","ARENA","colliding","add","direction","pos","detectCollision","merge","sweep","other","includes","type","toString","set","random","arenaMatrix","w","UP","a","space","SHOOT","r","RESTART","q","e","maxVelocity","fireDelay","friction","acceleration","audio","master","ambient","effects","keys","newKey","action","oldKey","findKey","console","log","Matrix","rows","columns","valid","equals","j","newArray","val","k","transpose","reverse","arr","slice","from"],"mappings":"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","file":"tetris.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 56);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d5fa7cdd55850c5c3c7c","import Observable from '../lib/observer/Observable'\nimport Settings from './Settings'\n\nexport enum Actions {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n  SHOOT = 'SHOOT',\n  RESTART = 'RESTART',\n  ROTATE_LEFT = 'R-LEFT',\n  ROTATE_RIGHT = 'R-RIGHT'\n}\n\n/**\n * Input manager class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class InputManager extends Observable {\n  inputMap\n  touches\n\n  /**\n   *\n   */\n  constructor (settings: Settings) {\n    super()\n    this.inputMap = settings.keyBoard\n    this.init()\n    this.initializeTouchHandler()\n    this.touches = {\n      start: [],\n      move: []\n    }\n  }\n\n  /**\n   * Register pressed keys and notify observers.\n   */\n  init (): void {\n    window.addEventListener('keydown', event => {\n      let key = event.key !== ' ' ? event.key : 'space'\n      this.state[this.inputMap[key]] = true\n      this.notify()\n    })\n    window.addEventListener('keyup', event => {\n      let key = event.key !== ' ' ? event.key : 'space'\n      this.state[this.inputMap[key]] = false\n      this.notify()\n    })\n  }\n\n  /**\n   * Maps swipe directions to key press booleans.\n   * Allows touch controls on mobile.\n   */\n  initializeTouchHandler (): void {\n    // Register the event listeners\n    let button = document.getElementById('move')\n    let el = button ? button : window\n    el.addEventListener('touchstart', handleTouchStart, false)\n    el.addEventListener('touchmove', handleTouchMove, false)\n    el.addEventListener('touchend', handleTouchEnd, false)\n    el.addEventListener('contextmenu', event => {\n      event.preventDefault()\n      return false\n    })\n\n    let start = []\n    let move = []\n    let touchstartX = 0\n    let touchstartY = 0\n    let toucheMoveX = 0\n    let touchMoveY = 0\n    let thisInstance = this\n\n    function handleTouchStart (evt): void {\n      evt.preventDefault()\n      start = evt.touches\n      touchstartX = evt.touches[0].pageX\n      touchstartY = evt.touches[0].pageY\n    }\n\n    function handleTouchMove (evt): void {\n      thisInstance.reset()\n      evt.preventDefault()\n      move = evt.changedTouches\n      toucheMoveX = evt.touches[0].pageX\n      touchMoveY = evt.touches[0].pageY\n      for (let i = 0; i < evt.touches.length; i++) {\n        // Positive values equals left. Negative values equals right\n        if (move[i].pageX < start[i].pageX) {\n          thisInstance.state[thisInstance.inputMap['a']] = true\n        }\n        if (move[i].pageX > start[i].pageX) {\n          thisInstance.state[thisInstance.inputMap['d']] = true\n        }\n        if (move[i].pageY < start[i].pageY) {\n          thisInstance.state[thisInstance.inputMap['w']] = true\n        }\n        if (move[i].pageY > start[i].pageY) {\n          thisInstance.state[thisInstance.inputMap['s']] = true\n        }\n        thisInstance.notify()\n      }\n    }\n\n    function handleTouchEnd (evt): void {\n      evt.preventDefault()\n      thisInstance.reset()\n    }\n  }\n\n  shoot (): void {\n    this.state[this.inputMap['space']] = true\n  }\n\n  cancelShoot (): void {\n    this.state[this.inputMap['space']] = false\n  }\n\n  reset (): void {\n    this.state[this.inputMap['w']] = false\n    this.state[this.inputMap['a']] = false\n    this.state[this.inputMap['s']] = false\n    this.state[this.inputMap['d']] = false\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/InputManager.ts","/**\n * 2D vector implementation.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Vector2 {\n  private _x: number\n  private _y: number\n\n  /**\n   * Default constructor. Sets x and y values.\n   *\n   * @param {number} x initial x value\n   * @param {number} y initial y value\n   */\n  constructor (x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Static addVector method to combine two vectors into a new one.\n   *\n   * @param {Vector2} v1 first vector\n   * @param {Vector2} v2 second vector\n   * @returns {Vector2} combined vector\n   */\n  static addVector (v1: Vector2, v2: Vector2): Vector2 {\n    return new Vector2(v1.x + v2.x, v1.y + v2.y)\n  }\n\n  /**\n   * Subtract two vector from each other and put the result into a new vector.\n   *\n   * @param {Vector2} v1 first vector\n   * @param {Vector2} v2 second vector\n   * @returns {Vector2} resulting vector\n   */\n  static subtractVector (v1: Vector2, v2: Vector2): Vector2 {\n    return new Vector2(v1.x - v2.x, v1.y - v2.y)\n  }\n\n  /**\n   * Multiplies a vector with a scalar and returns the resulting vector.\n   *\n   * @param {Vector2} vector initial vector\n   * @param {number} scalar scalar to scale the vector\n   * @returns {Vector2} the resulting vector\n   */\n  static multiply (vector: Vector2, scalar: number): Vector2 {\n    return new Vector2(vector.x * scalar, vector.y * scalar)\n  }\n\n  /**\n   * Divides a vector by a scalar and returns the result in a new vector.\n   * Throws error if trying to divide by zero.\n   *\n   * @param {Vector2} vector vector to divide\n   * @param {number} scalar scalar used to divide vector\n   * @returns {Vector2} resulting vector\n   */\n  static divide (vector: Vector2, scalar: number): Vector2 {\n    if (scalar === 0) {\n      throw new Error('cannot divide vector by scalar with value \"0\"')\n    }\n    return new Vector2(vector.x / scalar, vector.y / scalar)\n  }\n\n  /**\n   * Set x value of this vector.\n   *\n   * @param {number} x new x value\n   */\n  set x (x: number) {\n    this._x = x\n  }\n\n  /**\n   * Set y value of this vector.\n   *\n   * @param {number} y new y value\n   */\n  set y (y: number) {\n    this._y = y\n  }\n\n  /**\n   * Getter for x value\n   * @returns {number} x value\n   */\n  get x (): number {\n    return this._x\n  }\n\n  /**\n   * Getter for y value\n   * @returns {number} y value\n   */\n  get y (): number {\n    return this._y\n  }\n\n  /**\n   * Set vector with both x and y values.\n   *\n   * @param {number} x new x value\n   * @param {number} y new y value\n   */\n  set (x: number, y: number): void {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set vector location to another vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  setVector (vector: Vector2): void {\n    this.x = vector.x\n    this.y = vector.y\n  }\n\n  /**\n   * Add x and y to this vector.\n   *\n   * @param {number} x x value\n   * @param {number} y y value\n   */\n  add (x: number, y: number): void {\n    this.x += x\n    this.y += y\n  }\n\n  /**\n   * Add vector to this vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  addVector (vector: Vector2): void {\n    this.x += vector.x\n    this.y += vector.y\n  }\n\n  /**\n   * Subtraxt x and y from this vector.\n   *\n   * @param {number} x x value\n   * @param {number} y y value\n   */\n  subtract (x: number, y: number): void {\n    this.x -= x\n    this.y -= y\n  }\n\n  /**\n   * Subtract a vector from this vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  subtractVector (vector: Vector2): void {\n    this.x -= vector.x\n    this.y -= vector.y\n  }\n\n  /**\n   * Multiply this vector by scalar.\n   *\n   * @param scalar scalar to multiply the vector\n   */\n  multiply (scalar: number): void {\n    this.x *= scalar\n    this.y *= scalar\n  }\n\n  /**\n   * Divides this vector by a scalar.\n   * Throws error when trying to divide by zero.\n   *\n   * @param {number} scalar scalar used to divide this vector\n   */\n  divide (scalar: number): void {\n    if (scalar === 0) {\n      throw new Error('cannot divide vector by \"0\"')\n    }\n    this.x /= scalar\n    this.y /= scalar\n  }\n\n  /**\n   * Get the magnitude / elementsCount of this vector.\n   *\n   * @returns {number} magnitude / elementsCount of this vector\n   */\n  mag (): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /**\n   * Negate the x and y values of this vector and return the result as a new Vector2 object.\n   *\n   * @returns {Vector2}\n   */\n  negative (): Vector2 {\n    return new Vector2(-this.x, -this.y)\n  }\n\n  /**\n   * Normalize the vector.\n   */\n  normalize (): void {\n    let magnitude = this.mag()\n    if (magnitude !== 0) {\n      this.divide(magnitude)\n    }\n  }\n\n  /**\n   * Limit the vector to a maximum elementsCount.\n   *\n   * @param max maximum elementsCount\n   */\n  limit (max): void {\n    if (Math.floor(this.mag()) > max) {\n      this.normalize()\n      this.multiply(max)\n    }\n  }\n\n  /**\n   * Get the distance of this vector to another vector.\n   *\n   * @param {Vector2} vector other vector\n   * @returns {number} calculated distance\n   */\n  distanceTo (vector: Vector2): number {\n    return Math.sqrt(Math.pow(vector.x - this.x, 2) + Math.pow(vector.y - this.y, 2))\n  }\n\n  /**\n   * Get the dot product between this vector and another vector.\n   *\n   * @param {Vector2} vector\n   * @returns {number} the dot product of this vector and the one passed as param.\n   */\n  dot (vector: Vector2): number {\n    return this.x * vector.x + this.y * vector.y\n  }\n\n  floor (): void {\n    this.x = Math.floor(this.x)\n    this.x = Math.floor(this.x)\n  }\n\n  /**\n   * Create a clone of this vector.\n   *\n   * @returns {Vector2} cloned vector\n   */\n  clone (): Vector2 {\n    return new Vector2(this.x, this.y)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/math/Vector2.ts","export enum EntityType {\n  PLAYER = 'ship',\n  ENEMY = 'enemy',\n  ENEMY_BULLET = 'bulletEnemy',\n  PLAYER_BULLET = 'bullet',\n  BACKGROUND = 'background',\n  MAP = 'map',\n  GAME_OVER = 'gameOver',\n  LASER = 'laser',\n  MAIN_THEME = 'shockWave',\n  EXPLOSION_I = 'explosion1',\n  EXPLOSION_II = 'explosion2',\n  BOX = 'box',\n  ARENA = 'arena'\n}\n\n/**\n * Interface for collide able objects.\n */\nexport default interface CollideAble {\n  type: EntityType\n  collidesWith\n  colliding: boolean\n\n  isCollideAbleWith (other: CollideAble): boolean\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/interfaces/CollideAble.ts","import Tetris from './Tetris'\nimport InputManager from '../client/InputManager'\nimport Settings from '../client/Settings'\nimport Piece from './Piece'\n\nconst settings = new Settings()\nconst inputManager = new InputManager(settings)\nconst canvas = document.getElementById('tetris') as HTMLCanvasElement\nconst tetris = new Tetris(canvas)\ntetris.addPlayer('p1', 'Daniel', new Piece(tetris.arena.matrix.mArray[0].length / 2, 0))\ninputManager.register(tetris.players[0])\ntetris.start()\n\n\n\n// WEBPACK FOOTER //\n// ./src/tetris/game.ts","import IGame from '../lib/interfaces/IGame'\nimport Player from './Player'\nimport Arena from './Arena'\nimport Vector2 from '../lib/math/Vector2'\nimport Piece from './Piece'\n\nconst colors = [\n  null,\n  '#FF0D72',\n  '#0DC2FF',\n  '#0DFF72',\n  '#F538FF',\n  '#FF8E0D',\n  '#FFE138',\n  '#3877FF'\n]\n\nexport default class Tetris implements IGame {\n  canvas: HTMLCanvasElement\n  context: CanvasRenderingContext2D\n  playing: boolean\n  lastTime: number\n  players: Player[]\n  arena: Arena\n\n  constructor (canvas: HTMLCanvasElement) {\n    this.canvas = canvas\n    this.context = canvas.getContext('2d')\n    this.playing = false\n    this.arena = new Arena()\n    this.players = []\n    this.lastTime = 0\n    this.context.scale(20, 20)\n  }\n\n  addPlayer (playerId: string, playerName: string, piece: Piece): void {\n    this.players.push(new Player(playerId, playerName, piece, this.arena))\n  }\n\n  start (): void {\n    this.playing = true\n    this.run()\n  }\n\n  drawMatrix (context: CanvasRenderingContext2D, matrix: number[][], offset: Vector2): void {\n    matrix.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          context.fillStyle = colors[value]\n          context.fillRect(x + offset.x,\n            y + offset.y,\n            1, 1)\n        }\n      })\n    })\n  }\n\n  animationCallback (timeStamp: number): void {\n    const deltaTime = timeStamp - this.lastTime\n    this.lastTime = timeStamp\n    this.update(deltaTime)\n    this.render()\n    requestAnimationFrame(this.animationCallback.bind(this))\n  }\n\n  update (deltaTime: number): void {\n    this.players.forEach(player => {\n      player.piece.dropCounter += deltaTime\n      if (player.piece.dropCounter > player.piece.dropInterval) {\n        player.piece.drop(this.arena, player)\n      }\n    })\n  }\n\n  render (): void {\n    this.context.fillStyle = '#000'\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    this.drawMatrix(this.context, this.arena.matrix.mArray, this.arena.postition)\n    this.drawMatrix(this.context, this.players[0].piece.matrix.mArray, this.players[0].piece.position)\n  }\n\n  run (): void {\n    requestAnimationFrame(this.animationCallback.bind(this))\n  }\n\n  stop (): void {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tetris/Tetris.ts","import Piece from './Piece'\nimport Observer from '../lib/observer/Observer'\nimport { Actions } from '../client/InputManager'\nimport Arena from './Arena'\n\nexport default class Player implements Observer {\n  piece: Piece\n  arena: Arena\n  id: string\n  name: string\n  score: number\n  state\n\n  constructor (id: string, name: string, piece: Piece, arena: Arena) {\n    this.id = id\n    this.name = name\n    this.score = 0\n    this.state = {}\n    this.piece = piece\n    this.arena = arena\n  }\n\n  update (state: any): void {\n    this.state = state\n    this.move(this.arena)\n  }\n\n  move (arena: Arena): void {\n    if (this.state[Actions.LEFT]) {\n      this.piece.move(-1)\n    }\n    if (this.state[Actions.RIGHT]) {\n      this.piece.move(1)\n    }\n    if (this.state[Actions.DOWN]) {\n      this.piece.drop(arena, this)\n    }\n    if (this.state[Actions.ROTATE_LEFT]) {\n      this.piece.rotate(arena, this, -1)\n    }\n    if (this.state[Actions.ROTATE_RIGHT]) {\n      this.piece.rotate(arena, this, 1)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tetris/Player.ts","import Matrix from '../lib/math/Matrix'\nimport Player from './Player'\nimport Vector2 from '../lib/math/Vector2'\n\nexport default class Arena {\n  matrix: Matrix\n  postition: Vector2\n\n  constructor () {\n    this.postition = new Vector2(0, 0)\n    this.init(12, 20)\n  }\n\n  init (width: number, height: number): void {\n    const array = []\n    while (height--) {\n      array.push(new Array(width).fill(0))\n    }\n    this.matrix = new Matrix(array)\n  }\n\n  sweep (player: Player): void {\n    let rowCount = 1\n    outer: for (let y = this.matrix.mArray.length - 1; y > 0; --y) {\n      for (let x = 0; x < this.matrix.mArray[y].length; ++x) {\n        if (this.matrix.mArray[y][x] === 0) {\n          continue outer\n        }\n      }\n\n      const row = this.matrix.mArray.splice(y, 1)[0].fill(0)\n      this.matrix.mArray.unshift(row)\n      ++y\n\n      player.score += rowCount * 10\n      rowCount *= 2\n    }\n  }\n\n  merge (player: Player): void {\n    player.piece.matrix.mArray.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          this.matrix.mArray[y + player.piece.position.y][x + player.piece.position.x] = value\n        }\n      })\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tetris/Arena.ts","import Observer from './Observer'\n\n/**\n * Observable class to be extended by a class that should be observed.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Observable {\n  private _observers: Observer[]\n  private _state: any\n\n  constructor () {\n    this._observers = []\n    this._state = {}\n  }\n\n  /**\n   * Register an observer on this observable.\n   *\n   * @param {Observer} observer Object implementing the Observer interface\n   */\n  register (observer: Observer): void {\n    this._observers.push(observer)\n  }\n\n  /**\n   * Remove an observer from this observables observers list.\n   *\n   * @param {Observer} observer Object implementing the Observer interface\n   */\n  unRegister (observer: Observer): void {\n    this._observers = this._observers.filter(obs => {\n      return obs !== observer\n    })\n  }\n\n  /**\n   * Notify all observers.\n   */\n  notify (): void {\n    this._observers.forEach(observer => {\n      observer.update(this._state)\n    })\n  }\n\n  /**\n   *\n   * @returns {Observer[]}\n   */\n  get observers (): Observer[] {\n    return this._observers\n  }\n\n  /**\n   *\n   * @param {Observer[]} observers\n   */\n  set observers (observers: Observer[]) {\n    this._observers = observers\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get state (): any {\n    return this._state\n  }\n\n  /**\n   *\n   * @param {any} state\n   */\n  set state (state: any) {\n    this._state = state\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/observer/Observable.ts","import Matrix from '../lib/math/Matrix'\nimport Vector2 from '../lib/math/Vector2'\nimport CollideAble, { EntityType } from '../game/interfaces/CollideAble'\nimport MatrixCollisionManager from '../lib/collision/MatrixCollisionManager'\nimport Arena from './Arena'\nimport Player from './Player'\n\nexport const types = {\n  I: [\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n    [0, 1, 0, 0]\n  ],\n  L: [\n    [0, 2, 0],\n    [0, 2, 0],\n    [0, 2, 2]\n  ],\n  J: [\n    [0, 3, 0],\n    [0, 3, 0],\n    [3, 3, 0]\n  ],\n  O: [\n    [4, 4],\n    [4, 4]\n  ],\n  Z: [\n    [5, 5, 0],\n    [0, 5, 5],\n    [0, 0, 0]\n  ],\n  S: [\n    [0, 6, 6],\n    [6, 6, 0],\n    [0, 0, 0]\n  ],\n  T: [\n    [0, 7, 0],\n    [7, 7, 7],\n    [0, 0, 0]\n  ]\n}\n\n/**\n * Tetris piece representation.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Piece implements CollideAble {\n  position: Vector2\n  matrix: Matrix\n  type: EntityType\n  collidesWith\n  colliding: boolean\n  dropCounter: number\n  dropInterval: number\n\n  /**\n   * Default constructor.\n   *\n   * @param {number} x X position\n   * @param {number} y Y position\n   * @param {Matrix} matrix Matrix representing the piece\n   */\n  constructor (x: number, y: number) {\n    this.position = new Vector2(x, y)\n    this.matrix = new Matrix([[0]])\n    this.setRandom()\n    this.collidesWith = []\n    this.collidesWith.push(EntityType.ARENA)\n    this.colliding = false\n    this.dropCounter = 0\n    this.dropInterval = 1000\n  }\n\n  move (offset: number): void {\n    this.position.add(offset, 0)\n  }\n\n  rotate (arena: Arena, player: Player, direction: number): void {\n    const pos = player.piece.position.x\n    let offset = 1\n    this.matrix.rotate(direction)\n\n    while (MatrixCollisionManager.detectCollision(arena, player)) {\n      player.piece.position.x += offset\n      offset = -(offset + (offset > 0 ? 1 : -1))\n      if (offset > player.piece.matrix.mArray[0].length) {\n        player.piece.matrix.rotate(-direction)\n        player.piece.position.x = pos\n        return\n      }\n    }\n  }\n\n  drop (arena: Arena, player: Player): void {\n    this.position.add(0, 1)\n    if (MatrixCollisionManager.detectCollision(arena, player)) {\n      this.position.add(0, -1)\n      arena.merge(player)\n      this.reset(arena, player)\n      arena.sweep(player)\n    }\n    this.dropCounter = 0\n  }\n\n  isCollideAbleWith (other: CollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n\n  setRandom (): void {\n    const pieces = 'TJLOSZI'\n    this.matrix.set(types[pieces[pieces.length * Math.random() | 0]])\n  }\n\n  reset (arena: Arena, player: Player): void {\n    this.setRandom()\n    this.position.set((arena.matrix.mArray[0].length / 2 | 0) - (this.matrix.mArray[0].length / 2 | 0), 0)\n\n    if (MatrixCollisionManager.detectCollision(arena, player)) {\n      arena.matrix.mArray.forEach(row => row.fill(0))\n      player.score = 0\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tetris/Piece.ts","export default class MatrixCollisionManager {\n  static detectCollision (arena, player): boolean {\n    const arenaMatrix = arena.matrix.mArray\n    const m = player.piece.matrix.mArray\n    const o = player.piece.position\n    for (let y = 0; y < m.length; ++y) {\n      for (let x = 0; x < m[y].length; ++x) {\n        if (m[y][x] !== 0 &&\n          (arenaMatrix[y + o.y] &&\n            arenaMatrix[y + o.y][x + o.x]) !== 0) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/collision/MatrixCollisionManager.ts","import { Actions } from './InputManager'\n\n/**\n * Settings class for game applications.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Settings {\n  keyBoard\n  player\n  audio\n\n  constructor () {\n    this.keyBoard = {\n      'w': Actions.UP,\n      's': Actions.DOWN,\n      'a': Actions.LEFT,\n      'd': Actions.RIGHT,\n      'space': Actions.SHOOT,\n      'r': Actions.RESTART,\n      'q': Actions.ROTATE_LEFT,\n      'e': Actions.ROTATE_RIGHT\n    }\n    this.player = {\n      maxVelocity: 15,\n      fireDelay: 15,\n      friction: 0.7,\n      acceleration: 3\n    }\n    this.audio = {\n      master: 1,\n      ambient: 1,\n      effects: 1\n    }\n  }\n\n  findKey (value): string {\n    return Object.keys(this.keyBoard).filter(key => this.keyBoard[key] === value)[0]\n  }\n\n  setKey (newKey, action: Actions): void {\n    let oldKey = this.findKey(action)\n    if (newKey !== oldKey) {\n      console.log('old:' + oldKey, ' new: ' + newKey + ' value: ' + action)\n      this.keyBoard[newKey] = this.keyBoard[oldKey]\n      delete this.keyBoard[oldKey]\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/Settings.ts","/**\n * Matrix class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Matrix {\n  rows: number\n  columns: number\n  mArray: number[][]\n\n  /**\n   * Default constructor.\n   *\n   * @param {number[][]} mArray Matrix array\n   */\n  constructor (mArray: number[][]) {\n    this.mArray = mArray\n    this.rows = mArray.length\n    this.columns = mArray[0].length\n  }\n\n  set (array: number[][]): void {\n    const length = array[0].length\n    let valid = true\n    for (let i = 1; i < array.length; i++) {\n      if (array[i].length !== length) {\n        valid = false\n      }\n    }\n    if (valid) {\n      this.rows = array.length\n      this.columns = array[0].length\n      this.mArray = array\n    } else {\n      throw new Error('The passed matrix array is malformed: ' + array)\n    }\n  }\n\n  /**\n   * Add another matrix to this matrix.\n   * The dimension of the other matrix must be equal to this.\n   *\n   * @param {Matrix} matrix\n   */\n  add (matrix: Matrix): void {\n    if (this.equals(matrix)) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          this.mArray[i][j] += matrix.mArray[i][j]\n        }\n      }\n    }\n  }\n\n  /**\n   * Subtract another matrix from this matrix.\n   * The dimension of the other matrix must be equal to this.\n   *\n   * @param {Matrix} matrix\n   */\n  subtract (matrix: Matrix): void {\n    if (this.equals(matrix)) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          this.mArray[i][j] -= matrix.mArray[i][j]\n        }\n      }\n    }\n  }\n\n  /**\n   * Matrix multiplication algorithm.\n   *\n   * @param {Matrix} matrix Another matrix\n   * @returns {Matrix} Resulting matrix\n   */\n  multiply (matrix: Matrix): Matrix {\n    let newArray = []\n    if (this.columns === matrix.rows) {\n      for (let i = 0; i < this.rows; i++) {\n        newArray[i] = []\n        for (let j = 0; j < matrix.columns; j++) {\n          let val = 0\n          for (let k = 0; k < this.columns; k++) {\n            val += this.mArray[i][k] * matrix.mArray[k][j]\n          }\n          newArray[i].push(val)\n        }\n      }\n    } else {\n      return null\n    }\n    return new Matrix(newArray)\n  }\n\n  /**\n   * Multiply this matrix by a scalar.\n   *\n   * @param {number} scalar Scalar by which the matrix is multiplied by\n   */\n  multScalar (scalar: number): void {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.mArray[i][j] *= scalar\n      }\n    }\n  }\n\n  /**\n   * Transposes this matrix.\n   */\n  transpose (): void {\n    let array = []\n    for (let i = 0; i < this.columns; i++) {\n      array[i] = []\n      for (let j = 0; j < this.rows; j++) {\n        array[i][j] = this.mArray[j][i]\n      }\n    }\n\n    this.rows = array.length\n    this.columns = array[0].length\n    this.mArray = array\n  }\n\n  rotate (direction: number): void {\n    this.transpose()\n    if (direction > 0) {\n      this.mArray.forEach(row => row.reverse())\n    } else {\n      this.mArray.reverse()\n    }\n  }\n\n  /**\n   * Check if the row and column length are equal to another matrix's.\n   *\n   * @param {Matrix} other Other Matrix\n   * @returns {boolean} Returns true if the lengths match\n   */\n  equals (other: Matrix): boolean {\n    return other.rows === this.rows && other.columns === this.columns\n  }\n\n  /**\n   * Generate an exact copy of this matrix.\n   *\n   * @returns {Matrix} A copy of this matrix\n   */\n  clone (): Matrix {\n    let array = []\n    this.mArray.forEach(arr => array.push(arr.slice(0)))\n    return new Matrix(Array.from(array))\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/math/Matrix.ts"],"sourceRoot":""}