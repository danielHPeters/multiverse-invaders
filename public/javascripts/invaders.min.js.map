{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/interfaces/ICollideAble.ts","webpack:///./src/lib/math/Vector2.ts","webpack:///./src/lib/geometry/Dimension.ts","webpack:///./src/lib/entity/Entity.ts","webpack:///./src/lib/client/InputManager.ts","webpack:///./src/enum/ContextId.ts","webpack:///./src/enum/AssetId.ts","webpack:///./src/lib/client/AssetManager.ts","webpack:///./src/lib/collision/HitBox.ts","webpack:///./src/lib/event/EventHandler.ts","webpack:///./src/models/Enemy.ts","webpack:///./src/models/Bullet.ts","webpack:///./src/models/Pool.ts","webpack:///./src/models/Background.ts","webpack:///./src/models/Ship.ts","webpack:///./src/lib/collision/QuadTree.ts","webpack:///./src/application/InvadersState.ts","webpack:///./src/application/GameLoop.ts","webpack:///./src/lib/audio/Sound.ts","webpack:///./src/lib/client/AudioManager.ts","webpack:///./src/lib/client/SettingsMenu.ts","webpack:///./src/config/Settings.ts","webpack:///./src/lib/observer/Observable.ts","webpack:///./src/lib/collision/CollisionManager.ts","webpack:///./src/application/SpaceGame.ts","webpack:///./src/lib/ajax/Ajax.ts","webpack:///./src/lib/graphics/2D/SpriteSheet.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","e","EntityType","PLAYER","ENEMY","ENEMY_BULLET","PLAYER_BULLET","BACKGROUND","MAP","GAME_OVER","LASER","MAIN_THEME","EXPLOSION_I","EXPLOSION_II","BOX","ARENA","Vector2","[object Object]","x","y","this","v1","v2","vector","scalar","Error","_x","_y","Math","sqrt","magnitude","mag","divide","max","floor","normalize","multiply","pow","width","height","factor","position","dimension","settings","Observable_1","Actions","UP","DOWN","LEFT","RIGHT","SHOOT","RESTART","ROTATE_LEFT","ROTATE_RIGHT","super","inputMap","keyBoard","init","initializeTouchHandler","touches","start","move","window","addEventListener","event","key","state","notify","el","document","getElementById","evt","preventDefault","touchstartX","pageX","touchstartY","pageY","thisInstance","reset","changedTouches","toucheMoveX","touchMoveY","length","a","w","space","ContextId","MAIN","SHIP","AssetId","SpriteSheet_1","Ajax_1","AssetType","SPRITE","SPRITE_SHEET","AUDIO","AUDIO_AMB","audioManager","cache","sprites","spriteSheets","audio","downloadCount","queue","id","path","type","opts","push","item","callback","create","method","url","responseType","response","decodeAudio","buffer","done","sprite","Image","src","spriteSheet","frameWidth","frameHeight","forEach","loadAudio","loadSprite","loadSpriteSheet","ambient","createSound","Vector2_1","ICollideAble_1","colliding","collidesWith","other","includes","toString","element","events","listener","Entity_1","Dimension_1","speed","bulletPool","percentFire","chance","alive","speedX","speedY","leftEdge","rightEdge","bottomEdge","ctx","clearRect","dt","random","fire","drawImage","set","Bullet_1","Enemy_1","ContextId_1","assetManager","maxSize","asId","pool","assetId","subPool","contextId","getSprite","lastElement","spawn","unshift","pop","x1","y1","speed1","x2","y2","speed2","render","splice","objects","clear","InputManager_1","AssetManager_1","AssetId_1","startPosition","acceleration","velocity","counter","maxTop","gameSize","laserSound","getSound","startX","startY","setVector","add","player","friction","addVector","limit","maxVelocity","vel","clone","fireDelay","getTwo","play","HitBox_1","QuadTree","hitBox","level","maxObjects","maxLevels","nodes","node","returnedObjects","getAllObjects","console","log","index","getIndex","findObjects","obj","Array","insert","split","verticalMidpoint","horizontalMidpoint","topQuadrant","bottomQuadrant","subWidth","subHeight","QuadTree_1","Ship_1","Background_1","Pool_1","inputManager","running","paused","playerScore","background","playerBulletPool","ship","enemyBulletPool","enemyPool","quadTree","pools","entities","renderables","collideables","movables","backgroundAudio","spawnWave","register","spacer","stop","style","display","gameOverAudio","entity","clearAll","game","lastTime","frameId","requestAnimationFrame","time","loop","cancelAnimationFrame","diff","update","audioContext","masterGain","gainNode","createGain","gain","connect","playing","source","createBufferSource","Sound_1","initAudioContext","AudioContext","webkitAudioContext","effectsGain","ambientGain","destination","data","decodeAudioData","then","error","EventHandler_1","showing","mainMenu","createElement","classList","appendChild","tabId","tabContent","tabLink","getElementsByClassName","className","replace","currentTarget","keyboardLink","keyboardDiv","title","form","submit","registerOnElement","openTab","createTextNode","setAttribute","keys","setting","addEntry","setKey","playerLink","playerDiv","playerTitle","playerForm","playerSubmit","addPlayerSettingEntry","Number","audioLink","audioDiv","div","audioTitle","audioLabel","audioSlide","adjustMasterVolume","ambientDiv","ambientLabel","ambientSlide","adjustAmbientVolume","effectsDiv","effectsLabel","effectsSlide","adjustEffectsVolume","createMainMenu","createKeyboardMenu","createPlayerMenu","createAudioMenu","firstChild","removeChild","label","input","row","canvas","q","master","effects","filter","newKey","action","oldKey","findKey","_observers","_state","observer","obs","observers","j","isCollideAbleWith","CollisionManager_1","canvases","collisionManager","contexts","Map","getContext","main","context","renderable","detectCollision","movable","Ajax","xHttp","XMLHttpRequest","open","defaults","async","setRequestHeader","contentType","JSON","stringify","send","image","_image","_frameWidth","_frameHeight","_framesPerRow","framesPerRow","SpaceGame_1","Settings_1","SettingsMenu_1","AudioManager_1","GameLoop_1","InvadersState_1","settingsMenu","queueDownload","downloadAll","gameOver","shoot","cancelShoot","restart","toggleShow","togglePause"],"mappings":"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","file":"invaders.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","export enum EntityType {\n  PLAYER = 'ship',\n  ENEMY = 'enemy',\n  ENEMY_BULLET = 'bulletEnemy',\n  PLAYER_BULLET = 'bullet',\n  BACKGROUND = 'background',\n  MAP = 'map',\n  GAME_OVER = 'gameOver',\n  LASER = 'laser',\n  MAIN_THEME = 'shockWave',\n  EXPLOSION_I = 'explosion1',\n  EXPLOSION_II = 'explosion2',\n  BOX = 'box',\n  ARENA = 'arena'\n}\n\n/**\n * Interface for collideable entities.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default interface ICollideAble {\n  collidesWith: EntityType[]\n  colliding: boolean\n  type: EntityType\n\n  /**\n   *\n   * @param {ICollideAble} other\n   * @returns {boolean}\n   */\n  isCollideAbleWith (other: ICollideAble): boolean\n}\n","/**\n * 2D vector implementation.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Vector2 {\n  private _x: number\n  private _y: number\n\n  /**\n   * Default constructor. Sets x and y values.\n   *\n   * @param {number} x initial x value\n   * @param {number} y initial y value\n   */\n  constructor (x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Static addVector method to combine two vectors into a new one.\n   *\n   * @param {Vector2} v1 first vector\n   * @param {Vector2} v2 second vector\n   * @returns {Vector2} combined vector\n   */\n  static addVector (v1: Vector2, v2: Vector2): Vector2 {\n    return new Vector2(v1.x + v2.x, v1.y + v2.y)\n  }\n\n  /**\n   * Subtract two vector from each other and put the result into a new vector.\n   *\n   * @param {Vector2} v1 first vector\n   * @param {Vector2} v2 second vector\n   * @returns {Vector2} resulting vector\n   */\n  static subtractVector (v1: Vector2, v2: Vector2): Vector2 {\n    return new Vector2(v1.x - v2.x, v1.y - v2.y)\n  }\n\n  /**\n   * Multiplies a vector with a scalar and returns the resulting vector.\n   *\n   * @param {Vector2} vector initial vector\n   * @param {number} scalar scalar to scale the vector\n   * @returns {Vector2} the resulting vector\n   */\n  static multiply (vector: Vector2, scalar: number): Vector2 {\n    return new Vector2(vector.x * scalar, vector.y * scalar)\n  }\n\n  /**\n   * Divides a vector by a scalar and returns the result in a new vector.\n   * Throws error if trying to divide by zero.\n   *\n   * @param {Vector2} vector vector to divide\n   * @param {number} scalar scalar used to divide vector\n   * @returns {Vector2} resulting vector\n   */\n  static divide (vector: Vector2, scalar: number): Vector2 {\n    if (scalar === 0) {\n      throw new Error('cannot divide vector by scalar with value \"0\"')\n    }\n    return new Vector2(vector.x / scalar, vector.y / scalar)\n  }\n\n  /**\n   * Set x value of this vector.\n   *\n   * @param {number} x new x value\n   */\n  set x (x: number) {\n    this._x = x\n  }\n\n  /**\n   * Set y value of this vector.\n   *\n   * @param {number} y new y value\n   */\n  set y (y: number) {\n    this._y = y\n  }\n\n  /**\n   * Getter for x value\n   * @returns {number} x value\n   */\n  get x (): number {\n    return this._x\n  }\n\n  /**\n   * Getter for y value\n   * @returns {number} y value\n   */\n  get y (): number {\n    return this._y\n  }\n\n  /**\n   * Set vector with both x and y values.\n   *\n   * @param {number} x new x value\n   * @param {number} y new y value\n   */\n  set (x: number, y: number): void {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set vector location to another vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  setVector (vector: Vector2): void {\n    this.x = vector.x\n    this.y = vector.y\n  }\n\n  /**\n   * Add x and y to this vector.\n   *\n   * @param {number} x x value\n   * @param {number} y y value\n   */\n  add (x: number, y: number): void {\n    this.x += x\n    this.y += y\n  }\n\n  /**\n   * Add vector to this vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  addVector (vector: Vector2): void {\n    this.x += vector.x\n    this.y += vector.y\n  }\n\n  /**\n   * Subtraxt x and y from this vector.\n   *\n   * @param {number} x x value\n   * @param {number} y y value\n   */\n  subtract (x: number, y: number): void {\n    this.x -= x\n    this.y -= y\n  }\n\n  /**\n   * Subtract a vector from this vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  subtractVector (vector: Vector2): void {\n    this.x -= vector.x\n    this.y -= vector.y\n  }\n\n  /**\n   * Multiply this vector by scalar.\n   *\n   * @param scalar scalar to multiply the vector\n   */\n  multiply (scalar: number): void {\n    this.x *= scalar\n    this.y *= scalar\n  }\n\n  /**\n   * Divides this vector by a scalar.\n   * Throws error when trying to divide by zero.\n   *\n   * @param {number} scalar scalar used to divide this vector\n   */\n  divide (scalar: number): void {\n    if (scalar === 0) {\n      throw new Error('cannot divide vector by \"0\"')\n    }\n    this.x /= scalar\n    this.y /= scalar\n  }\n\n  /**\n   * Get the magnitude / elementsCount of this vector.\n   *\n   * @returns {number} magnitude / elementsCount of this vector\n   */\n  mag (): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /**\n   * Negate the x and y values of this vector and return the result as a new Vector2 object.\n   *\n   * @returns {Vector2}\n   */\n  negative (): Vector2 {\n    return new Vector2(-this.x, -this.y)\n  }\n\n  /**\n   * Normalize the vector.\n   */\n  normalize (): void {\n    let magnitude = this.mag()\n    if (magnitude !== 0) {\n      this.divide(magnitude)\n    }\n  }\n\n  /**\n   * Limit the vector to a maximum elementsCount.\n   *\n   * @param max maximum elementsCount\n   */\n  limit (max): void {\n    if (Math.floor(this.mag()) > max) {\n      this.normalize()\n      this.multiply(max)\n    }\n  }\n\n  /**\n   * Get the distance of this vector to another vector.\n   *\n   * @param {Vector2} vector other vector\n   * @returns {number} calculated distance\n   */\n  distanceTo (vector: Vector2): number {\n    return Math.sqrt(Math.pow(vector.x - this.x, 2) + Math.pow(vector.y - this.y, 2))\n  }\n\n  /**\n   * Get the dot product between this vector and another vector.\n   *\n   * @param {Vector2} vector\n   * @returns {number} the dot product of this vector and the one passed as param.\n   */\n  dot (vector: Vector2): number {\n    return this.x * vector.x + this.y * vector.y\n  }\n\n  floor (): void {\n    this.x = Math.floor(this.x)\n    this.x = Math.floor(this.x)\n  }\n\n  /**\n   * Create a clone of this vector.\n   *\n   * @returns {Vector2} cloned vector\n   */\n  clone (): Vector2 {\n    return new Vector2(this.x, this.y)\n  }\n}\n","/**\n * Dimension class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Dimension {\n  width: number\n  height: number\n\n  /**\n   * Constructor.\n   *\n   * @param {number} width Width\n   * @param {number} height Height\n   */\n  constructor (width: number, height: number) {\n    this.width = width\n    this.height = height\n  }\n\n  /**\n   * Scale the dimension.\n   *\n   * @param {number} factor\n   */\n  scale (factor: number) {\n    this.width *= factor\n    this.height *= factor\n  }\n}\n","import Vector2 from '../math/Vector2'\nimport Settings from '../../config/Settings'\nimport Dimension from '../geometry/Dimension'\n\n/**\n * Base entity class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Entity {\n  dimension: Dimension\n  settings: Settings\n  position: Vector2\n\n  /**\n   * Constructor. Sets position and dimension of entity.\n   *\n   * @param {Vector2} position Initial position\n   * @param {Dimension} dimension Initial dimension\n   * @param color Color of the entity\n   * @param {Settings} settings\n   */\n  constructor (position: Vector2, dimension: Dimension, settings: Settings) {\n    this.position = position\n    this.dimension = dimension\n    this.settings = settings\n  }\n\n  init (): void {\n    // throw new Error('Implement in subclass.')\n  }\n}\n","import Observable from '../observer/Observable'\nimport Settings from '../../config/Settings'\n\nexport enum Actions {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n  SHOOT = 'SHOOT',\n  RESTART = 'RESTART',\n  ROTATE_LEFT = 'R-LEFT',\n  ROTATE_RIGHT = 'R-RIGHT'\n}\n\n/**\n * Input manager class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class InputManager extends Observable {\n  inputMap\n  touches\n\n  /**\n   *\n   */\n  constructor (settings: Settings) {\n    super()\n    this.inputMap = settings.keyBoard\n    this.init()\n    this.initializeTouchHandler()\n    this.touches = {\n      start: [],\n      move: []\n    }\n  }\n\n  /**\n   * Register pressed keys and notify observers.\n   */\n  init (): void {\n    window.addEventListener('keydown', event => {\n      let key = event.key !== ' ' ? event.key : 'space'\n      this.state[this.inputMap[key]] = true\n      this.notify()\n    })\n    window.addEventListener('keyup', event => {\n      let key = event.key !== ' ' ? event.key : 'space'\n      this.state[this.inputMap[key]] = false\n      this.notify()\n    })\n  }\n\n  /**\n   * Maps swipe directions to key press booleans.\n   * Allows touch controls on mobile.\n   */\n  initializeTouchHandler (): void {\n    // Register the event listeners\n    let button = document.getElementById('move')\n    let el = button ? button : window\n    el.addEventListener('touchstart', handleTouchStart, false)\n    el.addEventListener('touchmove', handleTouchMove, false)\n    el.addEventListener('touchend', handleTouchEnd, false)\n    el.addEventListener('contextmenu', event => {\n      event.preventDefault()\n      return false\n    })\n\n    let start = []\n    let move = []\n    let touchstartX = 0\n    let touchstartY = 0\n    let toucheMoveX = 0\n    let touchMoveY = 0\n    let thisInstance = this\n\n    function handleTouchStart (evt): void {\n      evt.preventDefault()\n      start = evt.touches\n      touchstartX = evt.touches[0].pageX\n      touchstartY = evt.touches[0].pageY\n    }\n\n    function handleTouchMove (evt): void {\n      thisInstance.reset()\n      evt.preventDefault()\n      move = evt.changedTouches\n      toucheMoveX = evt.touches[0].pageX\n      touchMoveY = evt.touches[0].pageY\n      for (let i = 0; i < evt.touches.length; i++) {\n        // Positive values equals left. Negative values equals right\n        if (move[i].pageX < start[i].pageX) {\n          thisInstance.state[thisInstance.inputMap['a']] = true\n        }\n        if (move[i].pageX > start[i].pageX) {\n          thisInstance.state[thisInstance.inputMap['d']] = true\n        }\n        if (move[i].pageY < start[i].pageY) {\n          thisInstance.state[thisInstance.inputMap['w']] = true\n        }\n        if (move[i].pageY > start[i].pageY) {\n          thisInstance.state[thisInstance.inputMap['s']] = true\n        }\n        thisInstance.notify()\n      }\n    }\n\n    function handleTouchEnd (evt): void {\n      evt.preventDefault()\n      thisInstance.reset()\n    }\n  }\n\n  shoot (): void {\n    this.state[this.inputMap['space']] = true\n  }\n\n  cancelShoot (): void {\n    this.state[this.inputMap['space']] = false\n  }\n\n  reset (): void {\n    this.state[this.inputMap['w']] = false\n    this.state[this.inputMap['a']] = false\n    this.state[this.inputMap['s']] = false\n    this.state[this.inputMap['d']] = false\n  }\n}\n","export enum ContextId {\n  BACKGROUND, MAIN, SHIP\n}\n","/**\n *\n */\nexport enum AssetId {\n  PLAYER = 'ship',\n  ENEMY = 'enemy',\n  ENEMY_BULLET = 'bulletEnemy',\n  PLAYER_BULLET = 'bullet',\n  BACKGROUND = 'background',\n  MAP = 'map',\n  GAME_OVER = 'gameOver',\n  LASER = 'laser',\n  MAIN_THEME = 'shockWave',\n  EXPLOSION_I = 'explosion1',\n  EXPLOSION_II = 'explosion2',\n  BOX = 'box',\n  ARENA = 'arena'\n}\n","import SpriteSheet from '../graphics/2D/SpriteSheet'\nimport Sound from '../audio/Sound'\nimport Ajax from '../ajax/Ajax'\nimport { AssetId } from '../../enum/AssetId'\nimport AudioManager from './AudioManager'\n\nexport enum AssetType {\n  SPRITE = 'SPRITE', SPRITE_SHEET = 'SPRITE_SHEET', AUDIO = 'AUDIO', AUDIO_AMB = 'LOOP'\n}\n\n/**\n * Asset manager Class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class AssetManager {\n  private cache\n  private queue\n  private downloadCount: number\n  private audioManager: AudioManager\n\n  /**\n   * Constructor.\n   *\n   * @param {AudioManager} audioManager\n   */\n  constructor (audioManager: AudioManager) {\n    this.cache = {\n      sprites: {},\n      spriteSheets: {},\n      audio: {}\n    }\n    this.downloadCount = 0\n    this.queue = []\n    this.audioManager = audioManager\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  done (): boolean {\n    return this.downloadCount === this.queue.length\n  }\n\n  /**\n   *\n   * @param {AssetId} id\n   * @param {string} path\n   * @param {AssetType} type\n   * @param {{}} opts\n   */\n  queueDownload (id: AssetId, path: string, type: AssetType, opts = null): void {\n    this.queue.push({\n      id: id,\n      path: path,\n      type: type,\n      opts: opts\n    })\n  }\n\n  /**\n   * Build an AJAX Request to loadAudio audio file into the buffer cache.\n   *\n   * @param item object with name of file and path to file\n   * @param callback function to execute on done\n   */\n  loadAudio (item, callback): void {\n    Ajax.create({\n      method: 'GET',\n      url: item.path,\n      responseType: 'arraybuffer'\n    }, response => {\n      this.audioManager.decodeAudio(response, item.id, buffer => {\n        this.cache.audio[item.id] = buffer\n        this.downloadCount += 1\n        if (this.done()) {\n          callback()\n        }\n      })\n    })\n  }\n\n  /**\n   *\n   * @param item\n   * @param callback\n   */\n  loadSprite (item, callback): void {\n    let sprite = new Image()\n    sprite.addEventListener('load', () => {\n      this.downloadCount++\n      if (this.done()) {\n        callback()\n      }\n    })\n    sprite.src = item.path\n    this.cache.sprites[item.id] = sprite\n  }\n\n  /**\n   * Load sprites sheet.\n   *\n   * @param item sprite sheet info\n   * @param callback called upon downloading all\n   */\n  loadSpriteSheet (item, callback): void {\n    let spriteSheet = new Image()\n    spriteSheet.addEventListener('load', () => {\n      this.cache.spriteSheets[item.id] = new SpriteSheet(spriteSheet, item.opts.frameWidth || 0, item.opts.frameHeight || 0)\n      this.downloadCount += 1\n      if (this.done()) {\n        callback()\n      }\n    })\n    spriteSheet.src = item.path\n  }\n\n  /**\n   *\n   * @param callback\n   */\n  downloadAll (callback): void {\n    this.queue.forEach(item => {\n      if (item.type === AssetType.AUDIO) {\n        this.loadAudio(item, callback)\n      } else if (item.type === AssetType.SPRITE) {\n        this.loadSprite(item, callback)\n      } else if (item.type === AssetType.SPRITE_SHEET) {\n        this.loadSpriteSheet(item, callback)\n      }\n    })\n  }\n\n  /**\n   * Create an audio buffer source node from cached buffer.\n   * Send it to the destination of the audio context and play it.\n   *\n   * @param {AssetId} id file id\n   * @param {AssetType} type\n   */\n  getSound (id: AssetId, type: AssetType): Sound {\n    let ambient = type === AssetType.AUDIO_AMB\n    return this.audioManager.createSound(this.cache.audio[id], ambient)\n  }\n\n  /**\n   *\n   * @param {AssetId} id\n   * @returns {any}\n   */\n  getSprite (id: AssetId): any {\n    return this.cache.sprites[id]\n  }\n\n  /**\n   * Get sprite sheet by name.\n   *\n   * @param {AssetId} id\n   * @returns {SpriteSheet}\n   */\n  getSpriteSheet (id: AssetId): SpriteSheet {\n    return this.cache.spriteSheets[id]\n  }\n}\n","import Vector2 from '../math/Vector2'\nimport ICollideAble, { EntityType } from '../interfaces/ICollideAble'\n\n/**\n * Hitbox used for defining collision boundaries.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class HitBox implements ICollideAble {\n  type: EntityType\n  collidesWith\n  colliding: boolean\n  position: Vector2\n  width: number\n  height: number\n\n  /**\n   * Initializes position and dimension.\n   * @param {number} x position x\n   * @param {number} y position y\n   * @param {number} width dimension width\n   * @param {number} height dimension height\n   */\n  constructor (x, y, width, height) {\n    this.position = new Vector2(x, y)\n    this.width = width\n    this.height = height\n    this.colliding = false\n    this.collidesWith = []\n    this.type = EntityType.BOX\n    this.collidesWith.push(EntityType.PLAYER)\n  }\n\n  /**\n   *\n   * @param {ICollideAble} other\n   * @returns {boolean}\n   */\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","/**\n * Wrapper class for event handler convenience functions.\n */\nexport default class EventHandler {\n  /**\n   * Register multiple events with the same event listener on one element.\n   *\n   * @param {HTMLElement} element html element to add the events to\n   * @param {Array<string>} events the events to be registered\n   * @param {EventListener} listener the event listener function\n   */\n  static registerOnElement (element: HTMLElement, events: Array<string>, listener: EventListener): void {\n    events.forEach(event => element.addEventListener(event, listener))\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport Pool from './Pool'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport SpaceGame from '../application/SpaceGame'\nimport Sound from '../lib/audio/Sound'\nimport Settings from '../config/Settings'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Entity from '../lib/entity/Entity'\nimport Dimension from '../lib/geometry/Dimension'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n * Enemy ship class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Enemy extends Entity implements IRenderable, IMovable, ICollideAble {\n  contextId: ContextId\n  velocity: Vector2\n  acceleration: Vector2\n  speed: number\n  speedX: number\n  speedY: number\n  leftEdge: number\n  rightEdge: number\n  bottomEdge: number\n  sprite: any\n  percentFire: number\n  chance: number\n  alive: boolean\n  bulletPool: Pool\n  collidesWith\n  type: EntityType\n  colliding: boolean\n  explosionSound: Sound\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   * @param {number} speed\n   * @param sprite\n   * @param {EntityType} type\n   * @param {Pool} bulletPool\n   * @param {Settings} settings\n   */\n  constructor (x: number, y: number, width: number, height: number, speed: number, sprite, type: EntityType, bulletPool: Pool, settings: Settings) {\n    super(new Vector2(x, y), new Dimension(width, height), settings)\n    this.speed = speed\n    this.sprite = sprite\n    this.percentFire = 0.001\n    this.chance = 0\n    this.alive = false\n    this.type = type\n    this.collidesWith = []\n    this.collidesWith.push(EntityType.PLAYER_BULLET)\n    this.colliding = false\n    this.bulletPool = bulletPool\n  }\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} speed\n   */\n  spawn (x: number, y: number, speed: number): void {\n    this.position.x = x\n    this.position.y = y\n    this.speed = speed\n    this.speedX = 0\n    this.speedY = speed\n    this.alive = true\n    this.leftEdge = this.position.x - 180\n    this.rightEdge = this.position.x + 180\n    this.bottomEdge = this.position.y + 280\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    ctx.clearRect(this.position.x - 1, this.position.y, this.dimension.width + 1, this.dimension.height)\n  }\n\n  move (dt: number): void {\n    if (!this.colliding) {\n      this.position.x += this.speedX\n      this.position.y += this.speedY\n      if (this.position.x <= this.leftEdge) {\n        this.speedX = this.speed\n      } else if (this.position.x >= this.rightEdge + this.dimension.width) {\n        this.speedX = -this.speed\n      } else if (this.position.y >= this.bottomEdge) {\n        this.speed = 1.5\n        this.speedY = 0\n        this.position.y -= 5\n        this.speedX = -this.speed\n      }\n      this.chance = Math.floor(Math.random() * 101)\n      if (this.chance / 100 < this.percentFire) {\n        this.fire()\n      }\n    } else {\n      // this.game.scorePoints()\n    }\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    ctx.drawImage(this.sprite, this.position.x, this.position.y)\n  }\n\n  /**\n   *\n   */\n  fire (): void {\n    this.bulletPool.get(Math.floor(this.position.x + this.dimension.width / 2), Math.floor(this.position.y + this.dimension.height), -5)\n  }\n\n  /**\n   *\n   */\n  reset (): void {\n    this.position.x = 0\n    this.position.y = 0\n    this.speed = 0\n    this.speedX = 0\n    this.speedY = 0\n    this.alive = false\n    this.colliding = false\n  }\n\n  /**\n   *\n   * @param {ICollideAble} other\n   */\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport Entity from '../lib/entity/Entity'\nimport Settings from '../config/Settings'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Dimension from '../lib/geometry/Dimension'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n *\n */\nexport default class Bullet extends Entity implements IRenderable, IMovable, ICollideAble {\n  contextId: ContextId\n  velocity: Vector2\n  acceleration: Vector2\n  speed: number\n  sprite: any\n  alive: boolean\n  collidesWith\n  type: EntityType\n  colliding: boolean\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   * @param {number} speed\n   * @param {any} sprite\n   * @param {string} type\n   * @param settings\n   */\n  constructor (x: number, y: number, width: number, height: number, speed: number, sprite: any, type: EntityType, settings: Settings) {\n    super(new Vector2(x, y), new Dimension(width, height), settings)\n    this.speed = speed\n    this.sprite = sprite\n    this.alive = false\n    this.type = type\n    this.colliding = false\n    this.collidesWith = []\n    if (this.type === EntityType.PLAYER_BULLET) {\n      this.collidesWith.push(EntityType.ENEMY)\n    } else if (this.type === EntityType.ENEMY_BULLET) {\n      this.collidesWith.push(EntityType.PLAYER)\n    }\n    this.settings = settings\n  }\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} speed\n   */\n  spawn (x: number, y: number, speed: number): void {\n    this.position.set(x, y)\n    this.speed = speed\n    this.alive = true\n  }\n\n  move (dt: number): void {\n    this.position.y -= this.speed\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    ctx.clearRect(this.position.x - 1, this.position.y - 1, this.dimension.width + 1, this.dimension.height + 1)\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    /* if (this.type === EntityType.PLAYER_BULLET && this.position.y <= 0 - this.dimension.height) {\n    } else if (this.type === EntityType.ENEMY_BULLET && this.position.y >= this.settings.gameSize.height) {\n    } else { }*/\n    ctx.drawImage(this.sprite, this.position.x, this.position.y)\n  }\n\n  reset (): void {\n    this.position.set(0, 0)\n    this.speed = 0\n    this.alive = false\n    this.colliding = false\n  }\n\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","import AssetManager from '../lib/client/AssetManager'\nimport Bullet from './Bullet'\nimport Enemy from './Enemy'\nimport { EntityType } from '../lib/interfaces/ICollideAble'\nimport { AssetId } from '../enum/AssetId'\nimport Settings from '../config/Settings'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport { ContextId } from '../enum/ContextId'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Vector2 from '../lib/math/Vector2'\n\n/**\n *\n */\nexport default class Pool implements IRenderable, IMovable {\n  velocity: Vector2\n  acceleration: Vector2\n  contextId: ContextId\n  assetManager: AssetManager\n  maxSize: number\n  type: EntityType\n  assetId: AssetId\n  pool: any[]\n  subPool: Pool\n  settings: Settings\n\n  /**\n   *\n   * @param {AssetManager} assetManager\n   * @param {number} maxSize\n   * @param {EntityType} type\n   * @param {AssetId} asId\n   * @param {Settings} settings\n   * @param {Pool} pool\n   */\n  constructor (assetManager: AssetManager, maxSize: number, type: EntityType, asId: AssetId, settings: Settings, pool: Pool = null) {\n    this.assetManager = assetManager\n    this.maxSize = maxSize\n    this.type = type\n    this.assetId = asId\n    this.pool = []\n    this.subPool = pool\n    this.settings = settings\n    this.contextId = ContextId.MAIN\n    this.init()\n  }\n\n  /**\n   *\n   */\n  init (): void {\n    let sprite = this.assetManager.getSprite(this.assetId)\n    if (this.type === EntityType.ENEMY) {\n      for (let i = 0; i < this.maxSize; i++) {\n        this.pool[i] = new Enemy(0, 0, sprite.width, sprite.height, 0, sprite, this.type, this.subPool, this.settings)\n      }\n    } else {\n      for (let i = 0; i < this.maxSize; i++) {\n        this.pool[i] = new Bullet(0, 0, sprite.width, sprite.height, 0, sprite, this.type, this.settings)\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} speed\n   */\n  get (x: number, y: number, speed: number): void {\n    let lastElement = this.pool[this.maxSize - 1]\n    if (!lastElement.alive) {\n      lastElement.spawn(x, y, speed)\n      this.pool.unshift(this.pool.pop())\n    }\n  }\n\n  /**\n   *\n   * @param {number} x1\n   * @param {number} y1\n   * @param {number} speed1\n   * @param {number} x2\n   * @param {number} y2\n   * @param {number} speed2\n   */\n  getTwo (x1: number, y1: number, speed1: number, x2: number, y2: number, speed2: number): void {\n    if (!this.pool[this.maxSize - 1].alive &&\n      !this.pool[this.maxSize - 2].alive) {\n      this.get(x1, y1, speed1)\n      this.get(x2, y2, speed2)\n    }\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    for (let i = 0; i < this.pool.length; i++) {\n      // Only draw until we find a bullet that is not alive\n      if (this.pool[i].alive) {\n        this.pool[i].render(ctx)\n        this.pool[i].reset()\n        this.pool.push((this.pool.splice(i, 1))[0])\n      } else {\n        break\n      }\n    }\n  }\n\n  move (dt: number): void {\n    this.pool.forEach(object => object.move(dt))\n  }\n\n  clearAll (): void {\n    this.pool.forEach(object => object.reset())\n  }\n\n  getPool (): IMovable[] {\n    let objects = []\n    this.pool.forEach(object => {\n      if (object.alive) {\n        objects.push(object)\n      }\n    })\n    return objects\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    this.pool.forEach(object => object.clear(ctx))\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport { EntityType } from '../lib/interfaces/ICollideAble'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport { ContextId } from '../enum/ContextId'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Entity from '../lib/entity/Entity'\nimport Dimension from '../lib/geometry/Dimension'\nimport Settings from '../config/Settings'\n\nexport default class Background extends Entity implements IRenderable, IMovable {\n  velocity: Vector2\n  acceleration: Vector2\n  contextId: ContextId\n  speed: number\n  type: EntityType\n  sprite: any\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   * @param sprite\n   * @param {Settings} settings\n   */\n  constructor (x: number, y: number, width: number, height: number, sprite: any, settings: Settings) {\n    super(new Vector2(x, y), new Dimension(width, height), settings)\n    this.speed = 1\n    this.sprite = sprite\n    this.type = EntityType.BACKGROUND\n    this.contextId = ContextId.BACKGROUND\n  }\n\n  reset (): void {\n    this.position.set(0, 0)\n  }\n\n  move (dt: number): void {\n    this.position.y += this.speed\n    if (this.position.y >= this.dimension.height) {\n      this.position.y = 0\n    }\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    ctx.drawImage(this.sprite, this.position.x, this.position.y)\n    ctx.drawImage(this.sprite, this.position.x, this.position.y - this.dimension.height)\n  }\n\n  clear (): void {\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport Pool from './Pool'\nimport Observer from '../lib/observer/Observer'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport { Actions } from '../lib/client/InputManager'\nimport AssetManager, { AssetType } from '../lib/client/AssetManager'\nimport Sound from '../lib/audio/Sound'\nimport { AssetId } from '../enum/AssetId'\nimport Entity from '../lib/entity/Entity'\nimport Settings from '../config/Settings'\nimport IMovable from '../lib/interfaces/IMovable'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport Dimension from '../lib/geometry/Dimension'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n *\n */\nexport default class Ship extends Entity implements IRenderable, IMovable, Observer, ICollideAble {\n  speed: number\n  acceleration: Vector2\n  sprite: any\n  pool: Pool\n  counter: number\n  collidesWith\n  type: EntityType\n  colliding: boolean\n  velocity: Vector2\n  state\n  maxTop: number\n  startPosition\n  settings: Settings\n  laserSound: Sound\n  assetManager: AssetManager\n  contextId: ContextId\n\n  /**\n   *\n   * @param {number} width\n   * @param {number} height\n   * @param {number} canvasWidth\n   * @param {number} canvasHeight\n   * @param context\n   * @param {AssetManager} assetManager\n   * @param {Pool} pool\n   * @param settings\n   */\n  constructor (width: number, height: number, assetManager: AssetManager, pool: Pool, settings: Settings) {\n    super(new Vector2(0, 0), new Dimension(width, height), settings)\n    this.startPosition = new Vector2(0, 0)\n    this.acceleration = new Vector2(0, 0)\n    this.velocity = new Vector2(0, 0)\n    this.sprite = assetManager.getSprite(AssetId.PLAYER)\n    this.type = EntityType.PLAYER\n    this.pool = pool\n    this.counter = 0\n    this.collidesWith = []\n    this.collidesWith.push(EntityType.ENEMY_BULLET)\n    this.colliding = false\n    this.state = {}\n    this.settings = settings\n    this.assetManager = assetManager\n    this.maxTop = Math.floor(this.settings.gameSize.height / 4 * 3)\n    this.laserSound = assetManager.getSound(AssetId.LASER, AssetType.AUDIO)\n    this.contextId = ContextId.SHIP\n  }\n\n  init (): void {\n    const startX = this.settings.gameSize.width / 2 - this.assetManager.getSprite(AssetId.PLAYER).width\n    const startY = this.settings.gameSize.height / 4 * 3 + this.assetManager.getSprite(AssetId.PLAYER).height * 2\n    this.position.setVector(new Vector2(startX, startY))\n    this.velocity.set(0, 0)\n    this.colliding = false\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    ctx.clearRect(Math.floor(this.position.x), Math.floor(this.position.y), this.dimension.width, this.dimension.height)\n  }\n\n  /**\n   *\n   */\n  move (dt: number): void {\n    if (!this.colliding) {\n      this.counter++\n      this.acceleration.set(0, 0)\n      if (this.state[Actions.LEFT]) {\n        this.acceleration.add(-this.settings.player.acceleration, 0)\n      }\n      if (this.state[Actions.RIGHT]) {\n        this.acceleration.add(this.settings.player.acceleration, 0)\n      }\n      if (this.state[Actions.UP]) {\n        this.acceleration.add(0, -this.settings.player.acceleration)\n      }\n      if (this.state[Actions.DOWN]) {\n        this.acceleration.add(0, this.settings.player.acceleration)\n      }\n      this.velocity.multiply(this.settings.player.friction)\n      this.velocity.addVector(this.acceleration)\n      this.velocity.limit(this.settings.player.maxVelocity)\n      const vel = this.velocity.clone()\n      vel.multiply(dt)\n      this.position.addVector(vel)\n      if (this.position.x <= 0) {\n        this.position.x = 0\n        this.velocity.x += -1\n      }\n      if (this.position.x >= this.settings.gameSize.width - this.dimension.width) {\n        this.position.x = this.settings.gameSize.width - this.dimension.width\n      }\n      if (this.position.y <= this.maxTop) {\n        this.position.y = this.maxTop\n      }\n      if (this.position.y >= this.settings.gameSize.height - this.dimension.height) {\n        this.position.y = this.settings.gameSize.height - this.dimension.height\n      }\n\n      if (this.state[Actions.SHOOT] && this.counter >= this.settings.player.fireDelay && !this.colliding) {\n        this.fire()\n        this.counter = 0\n      }\n    }\n  }\n\n  alive (): boolean {\n    return !this.colliding\n  }\n\n  render (ctx: CanvasRenderingContext2D): void {\n    ctx.drawImage(this.sprite, Math.floor(this.position.x), Math.floor(this.position.y))\n  }\n\n  update (state: any): void {\n    this.state = state\n  }\n\n  fire (): void {\n    this.pool.getTwo(\n      Math.floor(this.position.x) + 12, Math.floor(this.position.y), 6,\n      Math.floor(this.position.x) + 66, Math.floor(this.position.y), 6\n    )\n    this.laserSound.play()\n  }\n\n  /**\n   *\n   * @param {ICollideAble} other\n   * @returns {boolean}\n   */\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","import HitBox from './HitBox'\nimport ICollideAble from '../interfaces/ICollideAble'\n\n/**\n * QuadTree class used to optimize collision checking.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class QuadTree {\n  level: number\n  maxObjects: number\n  maxLevels: number\n  hitBox: HitBox\n  objects: ICollideAble[]\n  nodes: QuadTree[]\n\n  /**\n   * Constructor.\n   *\n   * @param {HitBox} hitBox\n   * @param {number} level\n   */\n  constructor (hitBox = new HitBox(0, 0, 0, 0), level = 0) {\n    this.level = level\n    this.maxObjects = 10\n    this.maxLevels = 5\n    this.hitBox = hitBox\n    this.objects = []\n    this.nodes = []\n  }\n\n  /**\n   * Clears the QuadTree and its sub nodes from all models objects.\n   */\n  clear (): void {\n    this.objects = []\n    this.nodes.forEach(node => node.clear())\n    this.nodes = []\n  }\n\n  /**\n   *\n   * @param returnedObjects\n   * @returns {any}\n   */\n  getAllObjects (returnedObjects) {\n    this.nodes.forEach(node => node.getAllObjects(returnedObjects))\n    this.objects.forEach(object => returnedObjects.push(object))\n    return returnedObjects\n  }\n\n  /**\n   *\n   * @param returnedObjects\n   * @param object\n   * @returns {any}\n   */\n  findObjects (returnedObjects, object) {\n    if (typeof object === 'undefined') {\n      console.log('UNDEFINED OBJECT')\n      return\n    }\n    let index = this.getIndex(object)\n    if (index !== -1 && this.nodes.length) {\n      this.nodes[index].findObjects(returnedObjects, object)\n    }\n    this.objects.forEach(obj => returnedObjects.push(obj))\n    return returnedObjects\n  }\n\n  /**\n   * Insert an object into the QuadTree.\n   *\n   * @param object\n   */\n  insert (object): void {\n    if (typeof object === 'undefined') {\n      return\n    }\n    if (object instanceof Array) {\n      object.forEach(element => this.insert(element))\n      return\n    }\n    if (this.nodes.length > 0) {\n      let index = this.getIndex(object)\n      // Only addVector the object to a sub node if it can fit completely within one\n      if (index !== -1) {\n        this.nodes[index].insert(object)\n        return\n      }\n    }\n    this.objects.push(object)\n\n    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\n      if (typeof this.nodes[0] === 'undefined') {\n        this.split()\n      }\n      let i = 0\n      while (i < this.objects.length) {\n        let index = this.getIndex(this.objects[i])\n        if (index !== -1) {\n          this.nodes[index].insert((this.objects.splice(i, 1))[0])\n        } else {\n          i++\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the index of an object from the QuadTree.\n   *\n   * @param object\n   * @returns {number}\n   */\n  getIndex (object): number {\n    let index = -1\n    let verticalMidpoint = this.hitBox.position.x + this.hitBox.width / 2\n    let horizontalMidpoint = this.hitBox.position.y + this.hitBox.height / 2\n    // Object can fit completely within the top quadrant\n    let topQuadrant = (object.position.y < horizontalMidpoint && object.position.y + object.height < horizontalMidpoint)\n    // Object can fit completely within the bottom quadrant\n    let bottomQuadrant = (object.position.y > horizontalMidpoint)\n    // Object can fit completely within the left quadrants\n    if (object.position.x < verticalMidpoint && object.position.x + object.width < verticalMidpoint) {\n      if (topQuadrant) {\n        index = 1\n      } else if (bottomQuadrant) {\n        index = 2\n      }\n    } else if (object.position.x > verticalMidpoint) { // Object can fix completely within the right quadrants\n      if (topQuadrant) {\n        index = 0\n      } else if (bottomQuadrant) {\n        index = 3\n      }\n    }\n    return index\n  }\n\n  /**\n   * Split the tree on demand.\n   */\n  split (): void {\n    let subWidth = (this.hitBox.width / 2) | 0\n    let subHeight = (this.hitBox.height / 2) | 0\n    this.nodes[0] = new QuadTree(\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\n    this.nodes[1] = new QuadTree(\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\n    this.nodes[2] = new QuadTree(\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\n    this.nodes[3] = new QuadTree(\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\n  }\n}\n","import IGameState from '../lib/interfaces/IGameState'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport QuadTree from '../lib/collision/QuadTree'\nimport Settings from '../config/Settings'\nimport InputManager from '../lib/client/InputManager'\nimport { default as AssetManager, AssetType } from '../lib/client/AssetManager'\nimport Ship from '../models/Ship'\nimport HitBox from '../lib/collision/HitBox'\nimport { AssetId } from '../enum/AssetId'\nimport Background from '../models/Background'\nimport Pool from '../models/Pool'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport Entity from '../lib/entity/Entity'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Sound from '../lib/audio/Sound'\n\n/**\n * Multiverse invaders game state.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class InvadersState implements IGameState {\n  running: boolean\n  paused: boolean\n  quadTree: QuadTree\n  entities: Entity[]\n  renderables: IRenderable[]\n  collideables: ICollideAble[]\n  movables: IMovable[]\n  pools: Pool[]\n  assetManager: AssetManager\n  backgroundAudio: Sound\n  gameOverAudio: Sound\n  playerScore: number\n\n  /**\n   *\n   * @param {Settings} settings\n   * @param {InputManager} inputManager\n   * @param {AssetManager} assetManager\n   */\n  constructor (settings: Settings, inputManager: InputManager, assetManager: AssetManager) {\n    this.assetManager = assetManager\n    this.running = false\n    this.paused = false\n    this.playerScore = 0\n    const background = new Background(\n      0,\n      0,\n      settings.gameSize.width,\n      settings.gameSize.height,\n      assetManager.getSprite(AssetId.BACKGROUND),\n      settings\n    )\n    const playerBulletPool = new Pool(this.assetManager, 80, EntityType.PLAYER_BULLET, AssetId.PLAYER_BULLET, settings)\n    const ship = new Ship(assetManager.getSprite(AssetId.PLAYER).width, assetManager.getSprite(AssetId.PLAYER).height, assetManager, playerBulletPool, settings)\n    const enemyBulletPool = new Pool(this.assetManager, 50, EntityType.ENEMY_BULLET, AssetId.ENEMY_BULLET, settings)\n    const enemyPool = new Pool(this.assetManager, 30, EntityType.ENEMY, AssetId.ENEMY, settings, enemyBulletPool)\n    this.quadTree = new QuadTree(new HitBox(0, 0, settings.gameSize.width, settings.gameSize.height))\n    this.pools = []\n    this.entities = []\n    this.renderables = []\n    this.collideables = []\n    this.movables = []\n\n    this.pools.push(playerBulletPool)\n    this.pools.push(enemyBulletPool)\n    this.pools.push(enemyPool)\n    this.entities.push(ship)\n    this.movables.push(ship)\n    this.renderables.push(ship)\n    this.entities.push(background)\n    this.movables.push(background)\n    this.movables.push(enemyPool)\n    this.movables.push(playerBulletPool)\n    this.movables.push(enemyBulletPool)\n    this.renderables.push(background)\n    this.renderables.push(playerBulletPool)\n    this.renderables.push(enemyBulletPool)\n    this.renderables.push(enemyPool)\n\n    this.backgroundAudio = this.assetManager.getSound(AssetId.MAIN_THEME, AssetType.AUDIO_AMB)\n    this.backgroundAudio.play(true)\n    this.spawnWave()\n    inputManager.register(ship)\n  }\n\n  /**\n   *\n   */\n  spawnWave (): void {\n    const height = this.assetManager.getSprite(AssetId.ENEMY).height\n    const width = this.assetManager.getSprite(AssetId.ENEMY).width\n    let x = 200\n    let y = -height\n    const spacer = y * 1.5\n    for (let i = 1; i <= 21; i++) {\n      this.pools[1].get(x, y, 4)\n      x += width + 25\n      if (i % 7 === 0) {\n        x = 200\n        y += spacer\n      }\n    }\n  }\n\n  scorePoints (): void {\n    this.playerScore += 10\n  }\n\n  gameOver (): void {\n    this.backgroundAudio.stop()\n    document.getElementById('game-over').style.display = 'block'\n    this.gameOverAudio = this.assetManager.getSound(AssetId.GAME_OVER, AssetType.AUDIO_AMB)\n    this.gameOverAudio.play(true)\n  }\n\n  reset (): void {\n    this.gameOverAudio.stop()\n    this.backgroundAudio.play(true)\n    document.getElementById('game-over').style.display = 'none'\n    this.quadTree.clear()\n    this.entities.forEach(entity => entity.init())\n    this.pools.forEach(pool => pool.clearAll())\n    this.playerScore = 0\n  }\n}\n","import IGameLoop from '../lib/interfaces/IGameLoop'\nimport IGame from '../lib/interfaces/IGame'\n\n/**\n * Game loop.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class GameLoop implements IGameLoop {\n  public game: IGame\n  public lastTime: number\n  public frameId: number\n\n  /**\n   * Constructor.\n   *\n   * @param {IGame} game Game instance\n   */\n  constructor (game: IGame) {\n    this.game = game\n    this.lastTime = null\n  }\n\n  /**\n   *\n   */\n  public start (): void {\n    this.game.init()\n    this.game.state.running = true\n    this.frameId = requestAnimationFrame(time => this.loop(time))\n  }\n\n  /**\n   *\n   */\n  public stop (): void {\n    this.game.state.running = false\n    if (this.frameId) {\n      cancelAnimationFrame(this.frameId)\n    }\n  }\n\n  public restart (): void {\n    this.stop()\n    this.start()\n  }\n\n  /**\n   *\n   */\n  public togglePause (): void {\n    this.game.state.paused = !this.game.state.paused\n  }\n\n  /**\n   *\n   */\n  public loop (time: number): void {\n    if (this.game.state.running) {\n      this.game.clear()\n      if (this.lastTime !== null) {\n        const diff = time - this.lastTime\n        if (!this.game.state.paused) {\n          this.game.update(diff / 1000)\n        }\n      }\n      this.lastTime = time\n      this.game.render()\n      this.frameId = requestAnimationFrame(time => this.loop(time))\n    }\n  }\n}","/**\n * Sound class used to play a sound from a file.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Sound {\n  audioContext: AudioContext\n  source: AudioBufferSourceNode\n  gainNode: GainNode\n  masterGain: GainNode\n  buffer\n  playing: boolean\n\n  /**\n   *\n   * @param audioContext\n   * @param {GainNode} masterGain\n   * @param buffer\n   */\n  constructor (audioContext, masterGain: GainNode, buffer) {\n    this.audioContext = audioContext\n    this.masterGain = masterGain\n    this.buffer = buffer\n    this.gainNode = this.audioContext.createGain()\n    this.gainNode.gain.value = 0.2\n    this.gainNode.connect(this.masterGain)\n    this.playing = false\n  }\n\n  /**\n   *\n   * @param {boolean} loop\n   */\n  play (loop = false): void {\n    this.source = this.audioContext.createBufferSource()\n    this.source.buffer = this.buffer\n    this.source.loop = loop\n    this.source.connect(this.gainNode)\n    this.source.start(0)\n  }\n\n  /**\n   *\n   */\n  stop (): void {\n    this.source.stop(0)\n  }\n}\n","import Sound from '../audio/Sound'\n\n/**\n * Audiomanager class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class AudioManager {\n  private audioContext: AudioContext\n  private masterGain: GainNode\n  private effectsGain: GainNode\n  private ambientGain: GainNode\n\n  /**\n   *\n   */\n  constructor () {\n    this.initAudioContext()\n  }\n\n  /**\n   *\n   */\n  initAudioContext (): void {\n    try {\n      // Fix for browsers using prefixes\n      window.AudioContext = window.AudioContext || webkitAudioContext\n      this.audioContext = new AudioContext()\n      this.masterGain = this.audioContext.createGain()\n      this.effectsGain = this.audioContext.createGain()\n      this.ambientGain = this.audioContext.createGain()\n      this.masterGain.gain.value = 1\n      this.masterGain.connect(this.audioContext.destination)\n      this.effectsGain.connect(this.masterGain)\n      this.ambientGain.connect(this.masterGain)\n      this.ambientGain.gain.value = 1\n      this.effectsGain.gain.value = 1\n    } catch (e) {\n      console.log('Web Audio API is not supported in this browser')\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @param id\n   * @param callback\n   */\n  decodeAudio (data, id, callback): void {\n    this.audioContext.decodeAudioData(data).then(\n      buffer => callback(buffer),\n      error => { console.log('Error with decoding audio data' + error) }\n    )\n  }\n\n  /**\n   *\n   * @param {number} value\n   */\n  adjustMasterVolume (value: number): void {\n    this.masterGain.gain.value = value\n  }\n\n  /**\n   *\n   * @param {number} value\n   */\n  adjustAmbientVolume (value: number): void {\n    this.ambientGain.gain.value = value\n  }\n\n  /**\n   *\n   * @param {number} value\n   */\n  adjustEffectsVolume (value: number): void {\n    this.effectsGain.gain.value = value\n  }\n\n  /**\n   *\n   * @param buffer\n   * @param {boolean} ambient\n   * @returns {Sound}\n   */\n  createSound (buffer, ambient: boolean): Sound {\n    return new Sound(this.audioContext, ambient ? this.ambientGain : this.effectsGain, buffer)\n  }\n}\n","import Settings from '../../config/Settings'\nimport { Actions } from './InputManager'\nimport AssetManager from './AssetManager'\nimport EventHandler from '../event/EventHandler'\nimport AudioManager from './AudioManager'\n\n/**\n * Simple settings menu.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class SettingsMenu {\n  element: HTMLDivElement\n  mainMenu: HTMLDivElement\n  settings: Settings\n  assetManager: AssetManager\n  audioManager: AudioManager\n  showing: boolean\n\n  constructor (element, settings: Settings, assetManager: AssetManager, audioManager: AudioManager) {\n    this.element = element\n    this.settings = settings\n    this.assetManager = assetManager\n    this.audioManager = audioManager\n    this.showing = false\n  }\n\n  createMainMenu (): void {\n    this.mainMenu = document.createElement('div')\n    this.mainMenu.classList.add('tab')\n    this.element.appendChild(this.mainMenu)\n  }\n\n  openTab (event, tabId: string): void {\n    let tabContent\n    let tabLink\n    tabContent = document.getElementsByClassName('tabContent')\n    for (let i = 0; i < tabContent.length; i++) {\n      tabContent[i].style.display = 'none'\n    }\n    tabLink = document.getElementsByClassName('tabLink')\n    for (let i = 0; i < tabLink.length; i++) {\n      tabLink[i].className = tabLink[i].className.replace(' active', '')\n    }\n    document.getElementById(tabId).style.display = 'block'\n    event.currentTarget.className += ' active'\n  }\n\n  createKeyboardMenu (): void {\n    let keyboardMenuId = 'keyboardMenu'\n    let keyboardLink = document.createElement('button')\n    let keyboardDiv = document.createElement('div')\n    let title = document.createElement('h4')\n    let form = document.createElement('form')\n    let submit = document.createElement('input')\n    EventHandler.registerOnElement(\n      keyboardLink,\n      ['click', 'touchstart'],\n      event => this.openTab(event, keyboardMenuId)\n    )\n    keyboardLink.appendChild(document.createTextNode('Keyboard'))\n    keyboardLink.classList.add('tabLink')\n    this.mainMenu.appendChild(keyboardLink)\n    keyboardDiv.setAttribute('id', keyboardMenuId)\n    keyboardDiv.classList.add('tabContent')\n    title.appendChild(document.createTextNode('Keyboard'))\n    form.setAttribute('id', 'keyboardSettings')\n    form.setAttribute('method', 'post')\n    submit.setAttribute('type', 'submit')\n    submit.setAttribute('value', 'Save')\n    keyboardDiv.appendChild(title)\n    keyboardDiv.appendChild(form)\n    this.element.appendChild(keyboardDiv)\n    Object.keys(this.settings.keyBoard).forEach(setting => this.addEntry(setting, form))\n    form.appendChild(submit)\n    form.addEventListener('submit', event => {\n      event.preventDefault()\n      this.settings.setKey((document.getElementById(Actions.UP) as HTMLInputElement).value, Actions.UP)\n      this.settings.setKey((document.getElementById(Actions.DOWN) as HTMLInputElement).value, Actions.DOWN)\n      this.settings.setKey((document.getElementById(Actions.LEFT) as HTMLInputElement).value, Actions.LEFT)\n      this.settings.setKey((document.getElementById(Actions.RIGHT) as HTMLInputElement).value, Actions.RIGHT)\n      this.settings.setKey((document.getElementById(Actions.SHOOT) as HTMLInputElement).value, Actions.SHOOT)\n      this.settings.setKey((document.getElementById(Actions.RESTART) as HTMLInputElement).value, Actions.RESTART)\n      this.clear()\n    })\n  }\n\n  createPlayerMenu (): void {\n    let playerMenuId = 'playerMenu'\n    let playerLink = document.createElement('button')\n    let playerDiv = document.createElement('div')\n    let playerTitle = document.createElement('h4')\n    let playerForm = document.createElement('form')\n    let playerSubmit = document.createElement('input')\n    EventHandler.registerOnElement(\n      playerLink,\n      ['click', 'touchstart'],\n      event => this.openTab(event, playerMenuId)\n    )\n    playerLink.appendChild(document.createTextNode('Player'))\n    playerLink.classList.add('tabLink')\n    this.mainMenu.appendChild(playerLink)\n    playerDiv.setAttribute('id', playerMenuId)\n    playerDiv.classList.add('tabContent')\n    playerTitle.appendChild(document.createTextNode('Player Settings'))\n    playerForm.setAttribute('id', 'playerSettings')\n    playerForm.setAttribute('method', 'post')\n    playerSubmit.setAttribute('type', 'submit')\n    playerSubmit.setAttribute('value', 'Save')\n    playerDiv.appendChild(playerTitle)\n    playerDiv.appendChild(playerForm)\n    this.element.appendChild(playerDiv)\n    Object.keys(this.settings.player).forEach(setting => this.addPlayerSettingEntry(setting, playerForm))\n    playerForm.appendChild(playerSubmit)\n    playerForm.addEventListener('submit', event => {\n      event.preventDefault()\n      this.settings.player.acceleration = Number((document.getElementById('acceleration') as HTMLInputElement).value)\n      this.settings.player.maxVelocity = Number((document.getElementById('maxVelocity') as HTMLInputElement).value)\n      this.settings.player.friction = Number((document.getElementById('friction') as HTMLInputElement).value)\n      this.settings.player.fireDelay = Number((document.getElementById('fireDelay') as HTMLInputElement).value)\n      this.clear()\n    })\n  }\n\n  createAudioMenu (): void {\n    let audioMenuId = 'audioMenu'\n    let audioLink = document.createElement('button')\n    let audioDiv = document.createElement('div')\n    let div = document.createElement('div')\n    let audioTitle = document.createElement('h4')\n    let audioLabel = document.createElement('label')\n    let audioSlide = document.createElement('input')\n    EventHandler.registerOnElement(\n      audioLink,\n      ['click', 'touchstart'],\n      event => this.openTab(event, audioMenuId)\n    )\n    audioLink.classList.add('tabLink')\n    audioLink.appendChild(document.createTextNode('Audio'))\n    this.mainMenu.appendChild(audioLink)\n    audioDiv.setAttribute('id', audioMenuId)\n    audioDiv.classList.add('tabContent')\n    div.classList.add('row')\n    audioTitle.appendChild(document.createTextNode('Audio Settings'))\n    audioLabel.appendChild(document.createTextNode('Master Volume:'))\n    audioLabel.setAttribute('for', 'masterVolume')\n    audioSlide.setAttribute('id', 'masterVolume')\n    audioSlide.setAttribute('type', 'range')\n    audioSlide.setAttribute('min', '0')\n    audioSlide.setAttribute('max', '1')\n    audioSlide.setAttribute('step', '0.1')\n    audioSlide.addEventListener('change', event => this.audioManager.adjustMasterVolume(Number(audioSlide.value)))\n    div.appendChild(audioTitle)\n    div.appendChild(audioLabel)\n    div.appendChild(audioSlide)\n    audioDiv.appendChild(div)\n\n    let ambientDiv = document.createElement('div')\n    let ambientLabel = document.createElement('label')\n    let ambientSlide = document.createElement('input')\n    ambientDiv.classList.add('row')\n    ambientLabel.appendChild(document.createTextNode('Ambient Volume:'))\n    ambientLabel.setAttribute('for', 'ambientVolume')\n    ambientSlide.setAttribute('id', 'ambientVolume')\n    ambientSlide.setAttribute('type', 'range')\n    ambientSlide.setAttribute('min', '0')\n    ambientSlide.setAttribute('max', '1')\n    ambientSlide.setAttribute('step', '0.1')\n    ambientSlide.addEventListener('change', event => this.audioManager.adjustAmbientVolume(Number(ambientSlide.value)))\n    ambientDiv.appendChild(ambientLabel)\n    ambientDiv.appendChild(ambientSlide)\n    audioDiv.appendChild(ambientDiv)\n\n    let effectsDiv = document.createElement('div')\n    let effectsLabel = document.createElement('label')\n    let effectsSlide = document.createElement('input')\n    effectsDiv.classList.add('row')\n    effectsLabel.appendChild(document.createTextNode('Effects Volume:'))\n    effectsLabel.setAttribute('for', 'effectsVolume')\n    effectsSlide.setAttribute('id', 'effectsVolume')\n    effectsSlide.setAttribute('type', 'range')\n    effectsSlide.setAttribute('min', '0')\n    effectsSlide.setAttribute('max', '1')\n    effectsSlide.setAttribute('step', '0.1')\n    effectsSlide.addEventListener('change', event => this.audioManager.adjustEffectsVolume(Number(effectsSlide.value)))\n    effectsDiv.appendChild(effectsLabel)\n    effectsDiv.appendChild(effectsSlide)\n    audioDiv.appendChild(effectsDiv)\n    this.element.appendChild(audioDiv)\n  }\n\n  init (): void {\n    this.createMainMenu()\n    this.createKeyboardMenu()\n    this.createPlayerMenu()\n    this.createAudioMenu()\n  }\n\n  clear (): void {\n    while (this.element.firstChild) {\n      this.element.removeChild(this.element.firstChild)\n    }\n    this.init()\n  }\n\n  addPlayerSettingEntry (setting, element): void {\n    let label = document.createElement('label')\n    let input = document.createElement('input')\n    let row = document.createElement('div')\n    label.setAttribute('for', setting)\n    label.appendChild(document.createTextNode(setting + ':'))\n    input.setAttribute('id', setting)\n    input.setAttribute('type', 'number')\n    input.setAttribute('name', setting)\n    input.setAttribute('value', this.settings.player[setting])\n    row.classList.add('row')\n    row.appendChild(label)\n    row.appendChild(input)\n    element.appendChild(row)\n  }\n\n  addEntry (setting, element): void {\n    let row = document.createElement('div')\n    let label = document.createElement('label')\n    let input = document.createElement('input')\n    row.classList.add('row')\n    label.setAttribute('for', this.settings.keyBoard[setting])\n    label.appendChild(document.createTextNode(this.settings.keyBoard[setting] + ':'))\n    input.setAttribute('id', this.settings.keyBoard[setting])\n    input.setAttribute('type', 'text')\n    input.setAttribute('name', this.settings.keyBoard[setting])\n    input.setAttribute('value', setting)\n    row.appendChild(label)\n    row.appendChild(input)\n    element.appendChild(row)\n  }\n\n  toggleShow (): void {\n    if (this.showing) {\n      this.element.style.display = 'none'\n      this.showing = false\n    } else {\n      this.element.style.display = 'block'\n      this.showing = true\n    }\n  }\n}\n","import { Actions } from '../lib/client/InputManager'\nimport Dimension from '../lib/geometry/Dimension'\n\n/**\n * Settings class for models applications.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Settings {\n  keyBoard\n  player\n  audio\n  gameSize: Dimension\n\n  constructor (canvas: HTMLCanvasElement) {\n    this.keyBoard = {\n      'w': Actions.UP,\n      's': Actions.DOWN,\n      'a': Actions.LEFT,\n      'd': Actions.RIGHT,\n      'space': Actions.SHOOT,\n      'r': Actions.RESTART,\n      'q': Actions.ROTATE_LEFT,\n      'e': Actions.ROTATE_RIGHT\n    }\n    this.player = {\n      maxVelocity: 150,\n      fireDelay: 15,\n      friction: 0.9,\n      acceleration: 50\n    }\n    this.audio = {\n      master: 1,\n      ambient: 1,\n      effects: 1\n    }\n    this.gameSize = new Dimension(canvas.width, canvas.height)\n  }\n\n  findKey (value): string {\n    return Object.keys(this.keyBoard).filter(key => this.keyBoard[key] === value)[0]\n  }\n\n  setKey (newKey, action: Actions): void {\n    let oldKey = this.findKey(action)\n    if (newKey !== oldKey) {\n      console.log('old:' + oldKey, ' new: ' + newKey + ' value: ' + action)\n      this.keyBoard[newKey] = this.keyBoard[oldKey]\n      delete this.keyBoard[oldKey]\n    }\n  }\n}\n","import Observer from './Observer'\n\n/**\n * Observable class to be extended by a class that should be observed.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Observable {\n  private _observers: Observer[]\n  private _state: any\n\n  constructor () {\n    this._observers = []\n    this._state = {}\n  }\n\n  /**\n   * Register an observer on this observable.\n   *\n   * @param {Observer} observer Object implementing the Observer interface\n   */\n  register (observer: Observer): void {\n    this._observers.push(observer)\n  }\n\n  /**\n   * Remove an observer from this observables observers list.\n   *\n   * @param {Observer} observer Object implementing the Observer interface\n   */\n  unRegister (observer: Observer): void {\n    this._observers = this._observers.filter(obs => {\n      return obs !== observer\n    })\n  }\n\n  /**\n   * Notify all observers.\n   */\n  notify (): void {\n    this._observers.forEach(observer => {\n      observer.update(this._state)\n    })\n  }\n\n  /**\n   *\n   * @returns {Observer[]}\n   */\n  get observers (): Observer[] {\n    return this._observers\n  }\n\n  /**\n   *\n   * @param {Observer[]} observers\n   */\n  set observers (observers: Observer[]) {\n    this._observers = observers\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get state (): any {\n    return this._state\n  }\n\n  /**\n   *\n   * @param {any} state\n   */\n  set state (state: any) {\n    this._state = state\n  }\n}\n","import QuadTree from './QuadTree'\n\nexport default class CollisionManager {\n  quadTree: QuadTree\n\n  constructor (quadTree) {\n    this.quadTree = quadTree\n  }\n\n  detectCollision (): void {\n    let objects = []\n    this.quadTree.getAllObjects(objects)\n\n    for (let i = 0; i < objects.length; i++) {\n      let obj = []\n      this.quadTree.findObjects(obj, objects[i])\n\n      for (let j = 0; j < obj.length; j++) {\n        // DETECT COLLISION ALGORITHM\n        if (objects[i].isCollideAbleWith(obj[j]) &&\n          (Math.floor(objects[i].position.x) < Math.floor(obj[j].position.x) + obj[j].width &&\n            Math.floor(objects[i].position.x) + objects[i].width > Math.floor(obj[j].position.x) &&\n            Math.floor(objects[i].position.y) < Math.floor(obj[j].position.y) + obj[j].height &&\n            Math.floor(objects[i].position.y) + objects[i].height > Math.floor(obj[j].position.y))) {\n          objects[i].colliding = true\n          obj[j].colliding = true\n        }\n      }\n    }\n  }\n}","import Background from '../models/Background'\nimport AssetManager from '../lib/client/AssetManager'\nimport InputManager from '../lib/client/InputManager'\nimport Settings from '../config/Settings'\nimport IGame from '../lib/interfaces/IGame'\nimport IGameState from '../lib/interfaces/IGameState'\nimport ICollisionManager from '../lib/interfaces/ICollisionManager'\nimport CollisionManager from '../lib/collision/CollisionManager'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n * Space models main class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class SpaceGame implements IGame {\n  state: IGameState\n  background: Background\n  assetManager: AssetManager\n  inputManager: InputManager\n  collisionManager: ICollisionManager\n  settings: Settings\n  canvases\n  contexts: Map<ContextId, CanvasRenderingContext2D>\n\n  /**\n   *\n   * @param {IGameState} state\n   * @param {AssetManager} assetManager\n   * @param {InputManager} inputManager\n   * @param {Settings} settings\n   * @param canvases\n   */\n  constructor (state: IGameState, assetManager: AssetManager, inputManager: InputManager, settings: Settings, canvases) {\n    this.state = state\n    this.assetManager = assetManager\n    this.inputManager = inputManager\n    this.settings = settings\n    this.canvases = canvases\n    this.collisionManager = new CollisionManager(this.state.quadTree)\n    this.contexts = new Map<ContextId, CanvasRenderingContext2D>()\n    this.init()\n  }\n\n  /**\n   *\n   */\n  public init (): void {\n    if (this.canvases.background.getContext) {\n      this.contexts.set(ContextId.BACKGROUND, this.canvases.background.getContext('2d'))\n      this.contexts.set(ContextId.SHIP, this.canvases.ship.getContext('2d'))\n      this.contexts.set(ContextId.MAIN, this.canvases.main.getContext('2d'))\n      this.contexts.forEach(context => context.clearRect(0, 0, this.settings.gameSize.width, this.settings.gameSize.height))\n    }\n    this.state.entities.forEach(entity => entity.init())\n  }\n\n  /**\n   *\n   */\n  public clear (): void {\n    this.state.renderables.forEach(renderable => renderable.clear(this.contexts.get(renderable.contextId)))\n  }\n\n  /**\n   *\n   * @param {number} dt\n   */\n  public update (dt: number): void {\n    this.state.quadTree.clear()\n    this.state.quadTree.insert(this.state.collideables)\n    this.collisionManager.detectCollision()\n    this.state.movables.forEach(movable => movable.move(dt))\n  }\n\n  /**\n   *\n   */\n  public render (): void {\n    this.state.renderables.forEach(renderable => renderable.render(this.contexts.get(renderable.contextId)))\n  }\n}\n","export default class Ajax {\n  private static defaults = {\n    url: '',\n    method: 'GET',\n    contentType: 'text/html',\n    async: true,\n    data: null\n  }\n\n  /**\n   * Create and send an XML-HTTP request.\n   * Requires an options object.\n   *\n   * @param opts Possible option properties:\n   * url = url to send the request to.\n   * method = request method. GET, POST, PUT, DELETE.\n   * contentType = specify the content type of the request.\n   * async = boolean flag for async calls. Defaults to true.\n   * data = request body.\n   * @param callback success callback function\n   */\n  public static create (opts, callback): void {\n    let xHttp = new XMLHttpRequest()\n    xHttp.addEventListener('load', () => {\n      callback(xHttp.response)\n    })\n    xHttp.open(\n      opts.method ? opts.method : Ajax.defaults.method,\n      opts.url ? opts.url : Ajax.defaults.url,\n      opts.async ? opts.async : Ajax.defaults.async\n    )\n    if (opts.hasOwnProperty('contentType')) {\n      xHttp.setRequestHeader(\n        'Content-Type',\n        opts.contentType ? opts.contentType : Ajax.defaults.contentType\n      )\n    }\n    if (opts.hasOwnProperty('responseType')) {\n      xHttp.responseType = opts.responseType\n    }\n    if (opts.hasOwnProperty('data') && typeof opts.data === 'object') {\n      opts.data = JSON.stringify(opts.data)\n    }\n    xHttp.send(opts.data ? opts.data : null)\n  }\n}\n","/**\n * Sprite sheet definition.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class SpriteSheet {\n  private _image\n  private _frameWidth\n  private _frameHeight\n  private _framesPerRow\n\n  /**\n   * Constructor. Sets frame dimensions and calculates number of frames.\n   *\n   * @param image\n   * @param frameWidth\n   * @param frameHeight\n   */\n  constructor (image: HTMLImageElement, frameWidth, frameHeight) {\n    this._image = image\n    this._frameWidth = frameWidth\n    this._frameHeight = frameHeight\n    this._framesPerRow = Math.floor(this._image.width / this._frameWidth)\n  }\n\n  /**\n   *\n   * @returns {Image}\n   */\n  get image (): HTMLImageElement {\n    return this._image\n  }\n\n  /**\n   *\n   * @param {Image} image\n   */\n  set image (image: HTMLImageElement) {\n    if (!(image instanceof Image)) {\n      throw new Error('Param tileSetImage must be of type Image!')\n    }\n    this._image = image\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  get frameWidth (): number {\n    return this._frameWidth\n  }\n\n  /**\n   *\n   * @param {number} frameWidth\n   */\n  set frameWidth (frameWidth: number) {\n    this._frameWidth = frameWidth\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  get frameHeight (): number {\n    return this._frameHeight\n  }\n\n  /**\n   *\n   * @param {number} frameHeight\n   */\n  set frameHeight (frameHeight: number) {\n    this._frameHeight = frameHeight\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  get framesPerRow (): number {\n    return this._framesPerRow\n  }\n\n  /**\n   *\n   * @param {number} framesPerRow\n   */\n  set framesPerRow (framesPerRow: number) {\n    this._framesPerRow = framesPerRow\n  }\n}\n","import AssetManager, { AssetType } from './lib/client/AssetManager'\nimport SpaceGame from './application/SpaceGame'\nimport InputManager from './lib/client/InputManager'\nimport Settings from './config/Settings'\nimport SettingsMenu from './lib/client/SettingsMenu'\nimport EventHandler from './lib/event/EventHandler'\nimport { AssetId } from './enum/AssetId'\nimport AudioManager from './lib/client/AudioManager'\nimport GameLoop from './application/GameLoop'\nimport InvadersState from './application/InvadersState'\n\nconst audioManager = new AudioManager()\nconst assetManager = new AssetManager(audioManager)\nconst canvases = {\n  background: document.getElementById('background') as HTMLCanvasElement,\n  ship: document.getElementById('ship') as HTMLCanvasElement,\n  main: document.getElementById('main') as HTMLCanvasElement\n}\nconst settings = new Settings(canvases.background)\nconst inputManager = new InputManager(settings)\nconst settingsMenu = new SettingsMenu(document.getElementById('settings-menu'), settings, assetManager, audioManager)\nassetManager.queueDownload(AssetId.BACKGROUND, 'assets/textures/background.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.PLAYER, 'assets/sprites/ship.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.PLAYER_BULLET, 'assets/sprites/bullet.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.ENEMY, 'assets/sprites/enemy.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.ENEMY_BULLET, 'assets/sprites/bullet_enemy.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.MAIN_THEME, 'assets/audio/kick_shock.wav', AssetType.AUDIO)\nassetManager.queueDownload(AssetId.LASER, 'assets/audio/laser.wav', AssetType.AUDIO)\nassetManager.queueDownload(AssetId.EXPLOSION_I, 'assets/audio/explosion.wav', AssetType.AUDIO)\nassetManager.queueDownload(AssetId.GAME_OVER, 'assets/audio/game_over.wav', AssetType.AUDIO)\nassetManager.downloadAll(() => {\n  const state = new InvadersState(settings, inputManager, assetManager)\n  const game = new SpaceGame(state, assetManager, inputManager, settings, canvases)\n  const loop = new GameLoop(game)\n  settingsMenu.init()\n  let gameOver = document.getElementById('game-over')\n  let set = document.getElementById('settings')\n  let shoot = document.getElementById('shoot')\n  let events = ['click', 'touchstart']\n  shoot.addEventListener('touchstart', () => inputManager.shoot())\n  shoot.addEventListener('touchend', () => inputManager.cancelShoot())\n  shoot.addEventListener('contextmenu', event => {\n    event.preventDefault()\n    return false\n  })\n  EventHandler.registerOnElement(gameOver, events, () => loop.restart())\n  EventHandler.registerOnElement(set, events, () => {\n    settingsMenu.toggleShow()\n    loop.togglePause()\n  })\n  loop.start()\n})\n"],"sourceRoot":""}