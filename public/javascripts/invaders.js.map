{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/interfaces/ICollideAble.ts","webpack:///./src/lib/math/Vector2.ts","webpack:///./src/lib/geometry/Dimension.ts","webpack:///./src/lib/entity/Entity.ts","webpack:///./src/lib/client/InputManager.ts","webpack:///./src/enum/ContextId.ts","webpack:///./src/enum/AssetId.ts","webpack:///./src/lib/client/AssetManager.ts","webpack:///./src/lib/collision/HitBox.ts","webpack:///./src/lib/event/EventHandler.ts","webpack:///./src/models/Enemy.ts","webpack:///./src/models/Bullet.ts","webpack:///./src/models/Pool.ts","webpack:///./src/models/Background.ts","webpack:///./src/models/Ship.ts","webpack:///./src/lib/collision/QuadTree.ts","webpack:///./src/application/InvadersState.ts","webpack:///./src/application/GameLoop.ts","webpack:///./src/lib/audio/Sound.ts","webpack:///./src/lib/client/AudioManager.ts","webpack:///./src/lib/client/SettingsMenu.ts","webpack:///./src/config/Settings.ts","webpack:///./src/lib/observer/Observable.ts","webpack:///./src/lib/collision/CollisionManager.ts","webpack:///./src/application/SpaceGame.ts","webpack:///./src/lib/ajax/Ajax.ts","webpack:///./src/lib/graphics/2D/SpriteSheet.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","EntityType","Vector2","[object Object]","x","y","this","v1","v2","vector","scalar","Error","_x","_y","Math","sqrt","magnitude","mag","divide","max","floor","normalize","multiply","pow","default","width","height","factor","position","dimension","settings","Observable_1","Actions","super","inputMap","keyBoard","init","initializeTouchHandler","touches","start","move","window","addEventListener","event","key","state","notify","button","document","getElementById","el","evt","preventDefault","touchstartX","pageX","touchstartY","pageY","thisInstance","reset","changedTouches","toucheMoveX","touchMoveY","length","ContextId","AssetId","SpriteSheet_1","Ajax_1","AssetType","audioManager","cache","sprites","spriteSheets","audio","downloadCount","queue","id","path","type","opts","push","item","callback","create","method","url","responseType","response","decodeAudio","buffer","done","sprite","Image","src","spriteSheet","frameWidth","frameHeight","forEach","AUDIO","loadAudio","SPRITE","loadSprite","SPRITE_SHEET","loadSpriteSheet","ambient","AUDIO_AMB","createSound","Vector2_1","ICollideAble_1","colliding","collidesWith","BOX","PLAYER","other","includes","toString","element","events","listener","Entity_1","Dimension_1","speed","bulletPool","percentFire","chance","alive","PLAYER_BULLET","speedX","speedY","leftEdge","rightEdge","bottomEdge","ctx","clearRect","dt","random","fire","drawImage","ENEMY","ENEMY_BULLET","set","Bullet_1","Enemy_1","ContextId_1","assetManager","maxSize","asId","pool","assetId","subPool","contextId","MAIN","getSprite","lastElement","spawn","unshift","pop","x1","y1","speed1","x2","y2","speed2","render","splice","objects","clear","BACKGROUND","InputManager_1","AssetManager_1","AssetId_1","startPosition","acceleration","velocity","counter","maxTop","gameSize","laserSound","getSound","LASER","SHIP","startX","startY","setVector","LEFT","add","player","RIGHT","UP","DOWN","friction","addVector","limit","maxVelocity","vel","clone","SHOOT","fireDelay","getTwo","play","HitBox_1","QuadTree","hitBox","level","maxObjects","maxLevels","nodes","node","returnedObjects","getAllObjects","console","log","index","getIndex","findObjects","obj","Array","insert","split","verticalMidpoint","horizontalMidpoint","topQuadrant","bottomQuadrant","subWidth","subHeight","QuadTree_1","Ship_1","Background_1","Pool_1","inputManager","running","paused","playerScore","background","playerBulletPool","ship","enemyBulletPool","enemyPool","quadTree","pools","entities","renderables","collideables","movables","backgroundAudio","MAIN_THEME","spawnWave","register","spacer","stop","style","display","gameOverAudio","GAME_OVER","entity","clearAll","game","lastTime","frameId","requestAnimationFrame","time","loop","cancelAnimationFrame","diff","update","audioContext","masterGain","gainNode","createGain","gain","connect","playing","source","createBufferSource","Sound_1","initAudioContext","AudioContext","webkitAudioContext","effectsGain","ambientGain","destination","e","data","decodeAudioData","then","error","EventHandler_1","showing","mainMenu","createElement","classList","appendChild","tabId","tabContent","tabLink","getElementsByClassName","className","replace","currentTarget","keyboardLink","keyboardDiv","title","form","submit","registerOnElement","openTab","createTextNode","setAttribute","keys","setting","addEntry","setKey","RESTART","playerLink","playerDiv","playerTitle","playerForm","playerSubmit","addPlayerSettingEntry","Number","audioLink","audioDiv","div","audioTitle","audioLabel","audioSlide","adjustMasterVolume","ambientDiv","ambientLabel","ambientSlide","adjustAmbientVolume","effectsDiv","effectsLabel","effectsSlide","adjustEffectsVolume","createMainMenu","createKeyboardMenu","createPlayerMenu","createAudioMenu","firstChild","removeChild","label","input","row","canvas","w","a","space","q","ROTATE_LEFT","ROTATE_RIGHT","master","effects","filter","newKey","action","oldKey","findKey","_observers","_state","observer","obs","observers","j","isCollideAbleWith","CollisionManager_1","canvases","collisionManager","contexts","Map","getContext","main","context","renderable","detectCollision","movable","Ajax","xHttp","XMLHttpRequest","open","defaults","async","setRequestHeader","contentType","JSON","stringify","send","image","_image","_frameWidth","_frameHeight","_framesPerRow","framesPerRow","SpaceGame_1","Settings_1","SettingsMenu_1","AudioManager_1","GameLoop_1","InvadersState_1","settingsMenu","queueDownload","EXPLOSION_I","downloadAll","gameOver","shoot","cancelShoot","restart","toggleShow","togglePause"],"mappings":"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","file":"invaders.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","export enum EntityType {\n  PLAYER = 'ship',\n  ENEMY = 'enemy',\n  ENEMY_BULLET = 'bulletEnemy',\n  PLAYER_BULLET = 'bullet',\n  BACKGROUND = 'background',\n  MAP = 'map',\n  GAME_OVER = 'gameOver',\n  LASER = 'laser',\n  MAIN_THEME = 'shockWave',\n  EXPLOSION_I = 'explosion1',\n  EXPLOSION_II = 'explosion2',\n  BOX = 'box',\n  ARENA = 'arena'\n}\n\n/**\n * Interface for collideable entities.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default interface ICollideAble {\n  collidesWith: EntityType[]\n  colliding: boolean\n  type: EntityType\n\n  /**\n   *\n   * @param {ICollideAble} other\n   * @returns {boolean}\n   */\n  isCollideAbleWith (other: ICollideAble): boolean\n}\n","/**\n * 2D vector implementation.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Vector2 {\n  private _x: number\n  private _y: number\n\n  /**\n   * Default constructor. Sets x and y values.\n   *\n   * @param {number} x initial x value\n   * @param {number} y initial y value\n   */\n  constructor (x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Static addVector method to combine two vectors into a new one.\n   *\n   * @param {Vector2} v1 first vector\n   * @param {Vector2} v2 second vector\n   * @returns {Vector2} combined vector\n   */\n  static addVector (v1: Vector2, v2: Vector2): Vector2 {\n    return new Vector2(v1.x + v2.x, v1.y + v2.y)\n  }\n\n  /**\n   * Subtract two vector from each other and put the result into a new vector.\n   *\n   * @param {Vector2} v1 first vector\n   * @param {Vector2} v2 second vector\n   * @returns {Vector2} resulting vector\n   */\n  static subtractVector (v1: Vector2, v2: Vector2): Vector2 {\n    return new Vector2(v1.x - v2.x, v1.y - v2.y)\n  }\n\n  /**\n   * Multiplies a vector with a scalar and returns the resulting vector.\n   *\n   * @param {Vector2} vector initial vector\n   * @param {number} scalar scalar to scale the vector\n   * @returns {Vector2} the resulting vector\n   */\n  static multiply (vector: Vector2, scalar: number): Vector2 {\n    return new Vector2(vector.x * scalar, vector.y * scalar)\n  }\n\n  /**\n   * Divides a vector by a scalar and returns the result in a new vector.\n   * Throws error if trying to divide by zero.\n   *\n   * @param {Vector2} vector vector to divide\n   * @param {number} scalar scalar used to divide vector\n   * @returns {Vector2} resulting vector\n   */\n  static divide (vector: Vector2, scalar: number): Vector2 {\n    if (scalar === 0) {\n      throw new Error('cannot divide vector by scalar with value \"0\"')\n    }\n    return new Vector2(vector.x / scalar, vector.y / scalar)\n  }\n\n  /**\n   * Set x value of this vector.\n   *\n   * @param {number} x new x value\n   */\n  set x (x: number) {\n    this._x = x\n  }\n\n  /**\n   * Set y value of this vector.\n   *\n   * @param {number} y new y value\n   */\n  set y (y: number) {\n    this._y = y\n  }\n\n  /**\n   * Getter for x value\n   * @returns {number} x value\n   */\n  get x (): number {\n    return this._x\n  }\n\n  /**\n   * Getter for y value\n   * @returns {number} y value\n   */\n  get y (): number {\n    return this._y\n  }\n\n  /**\n   * Set vector with both x and y values.\n   *\n   * @param {number} x new x value\n   * @param {number} y new y value\n   */\n  set (x: number, y: number): void {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set vector location to another vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  setVector (vector: Vector2): void {\n    this.x = vector.x\n    this.y = vector.y\n  }\n\n  /**\n   * Add x and y to this vector.\n   *\n   * @param {number} x x value\n   * @param {number} y y value\n   */\n  add (x: number, y: number): void {\n    this.x += x\n    this.y += y\n  }\n\n  /**\n   * Add vector to this vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  addVector (vector: Vector2): void {\n    this.x += vector.x\n    this.y += vector.y\n  }\n\n  /**\n   * Subtraxt x and y from this vector.\n   *\n   * @param {number} x x value\n   * @param {number} y y value\n   */\n  subtract (x: number, y: number): void {\n    this.x -= x\n    this.y -= y\n  }\n\n  /**\n   * Subtract a vector from this vector.\n   *\n   * @param {Vector2} vector other vector\n   */\n  subtractVector (vector: Vector2): void {\n    this.x -= vector.x\n    this.y -= vector.y\n  }\n\n  /**\n   * Multiply this vector by scalar.\n   *\n   * @param scalar scalar to multiply the vector\n   */\n  multiply (scalar: number): void {\n    this.x *= scalar\n    this.y *= scalar\n  }\n\n  /**\n   * Divides this vector by a scalar.\n   * Throws error when trying to divide by zero.\n   *\n   * @param {number} scalar scalar used to divide this vector\n   */\n  divide (scalar: number): void {\n    if (scalar === 0) {\n      throw new Error('cannot divide vector by \"0\"')\n    }\n    this.x /= scalar\n    this.y /= scalar\n  }\n\n  /**\n   * Get the magnitude / elementsCount of this vector.\n   *\n   * @returns {number} magnitude / elementsCount of this vector\n   */\n  mag (): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y)\n  }\n\n  /**\n   * Negate the x and y values of this vector and return the result as a new Vector2 object.\n   *\n   * @returns {Vector2}\n   */\n  negative (): Vector2 {\n    return new Vector2(-this.x, -this.y)\n  }\n\n  /**\n   * Normalize the vector.\n   */\n  normalize (): void {\n    let magnitude = this.mag()\n    if (magnitude !== 0) {\n      this.divide(magnitude)\n    }\n  }\n\n  /**\n   * Limit the vector to a maximum elementsCount.\n   *\n   * @param max maximum elementsCount\n   */\n  limit (max): void {\n    if (Math.floor(this.mag()) > max) {\n      this.normalize()\n      this.multiply(max)\n    }\n  }\n\n  /**\n   * Get the distance of this vector to another vector.\n   *\n   * @param {Vector2} vector other vector\n   * @returns {number} calculated distance\n   */\n  distanceTo (vector: Vector2): number {\n    return Math.sqrt(Math.pow(vector.x - this.x, 2) + Math.pow(vector.y - this.y, 2))\n  }\n\n  /**\n   * Get the dot product between this vector and another vector.\n   *\n   * @param {Vector2} vector\n   * @returns {number} the dot product of this vector and the one passed as param.\n   */\n  dot (vector: Vector2): number {\n    return this.x * vector.x + this.y * vector.y\n  }\n\n  floor (): void {\n    this.x = Math.floor(this.x)\n    this.x = Math.floor(this.x)\n  }\n\n  /**\n   * Create a clone of this vector.\n   *\n   * @returns {Vector2} cloned vector\n   */\n  clone (): Vector2 {\n    return new Vector2(this.x, this.y)\n  }\n}\n","/**\n * Dimension class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Dimension {\n  width: number\n  height: number\n\n  /**\n   * Constructor.\n   *\n   * @param {number} width Width\n   * @param {number} height Height\n   */\n  constructor (width: number, height: number) {\n    this.width = width\n    this.height = height\n  }\n\n  /**\n   * Scale the dimension.\n   *\n   * @param {number} factor\n   */\n  scale (factor: number) {\n    this.width *= factor\n    this.height *= factor\n  }\n}\n","import Vector2 from '../math/Vector2'\nimport Settings from '../../config/Settings'\nimport Dimension from '../geometry/Dimension'\n\n/**\n * Base entity class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Entity {\n  dimension: Dimension\n  settings: Settings\n  position: Vector2\n\n  /**\n   * Constructor. Sets position and dimension of entity.\n   *\n   * @param {Vector2} position Initial position\n   * @param {Dimension} dimension Initial dimension\n   * @param color Color of the entity\n   * @param {Settings} settings\n   */\n  constructor (position: Vector2, dimension: Dimension, settings: Settings) {\n    this.position = position\n    this.dimension = dimension\n    this.settings = settings\n  }\n\n  init (): void {\n    // throw new Error('Implement in subclass.')\n  }\n}\n","import Observable from '../observer/Observable'\nimport Settings from '../../config/Settings'\n\nexport enum Actions {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n  SHOOT = 'SHOOT',\n  RESTART = 'RESTART',\n  ROTATE_LEFT = 'R-LEFT',\n  ROTATE_RIGHT = 'R-RIGHT'\n}\n\n/**\n * Input manager class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class InputManager extends Observable {\n  inputMap\n  touches\n\n  /**\n   *\n   */\n  constructor (settings: Settings) {\n    super()\n    this.inputMap = settings.keyBoard\n    this.init()\n    this.initializeTouchHandler()\n    this.touches = {\n      start: [],\n      move: []\n    }\n  }\n\n  /**\n   * Register pressed keys and notify observers.\n   */\n  init (): void {\n    window.addEventListener('keydown', event => {\n      let key = event.key !== ' ' ? event.key : 'space'\n      this.state[this.inputMap[key]] = true\n      this.notify()\n    })\n    window.addEventListener('keyup', event => {\n      let key = event.key !== ' ' ? event.key : 'space'\n      this.state[this.inputMap[key]] = false\n      this.notify()\n    })\n  }\n\n  /**\n   * Maps swipe directions to key press booleans.\n   * Allows touch controls on mobile.\n   */\n  initializeTouchHandler (): void {\n    // Register the event listeners\n    let button = document.getElementById('move')\n    let el = button ? button : window\n    el.addEventListener('touchstart', handleTouchStart, false)\n    el.addEventListener('touchmove', handleTouchMove, false)\n    el.addEventListener('touchend', handleTouchEnd, false)\n    el.addEventListener('contextmenu', event => {\n      event.preventDefault()\n      return false\n    })\n\n    let start = []\n    let move = []\n    let touchstartX = 0\n    let touchstartY = 0\n    let toucheMoveX = 0\n    let touchMoveY = 0\n    let thisInstance = this\n\n    function handleTouchStart (evt): void {\n      evt.preventDefault()\n      start = evt.touches\n      touchstartX = evt.touches[0].pageX\n      touchstartY = evt.touches[0].pageY\n    }\n\n    function handleTouchMove (evt): void {\n      thisInstance.reset()\n      evt.preventDefault()\n      move = evt.changedTouches\n      toucheMoveX = evt.touches[0].pageX\n      touchMoveY = evt.touches[0].pageY\n      for (let i = 0; i < evt.touches.length; i++) {\n        // Positive values equals left. Negative values equals right\n        if (move[i].pageX < start[i].pageX) {\n          thisInstance.state[thisInstance.inputMap['a']] = true\n        }\n        if (move[i].pageX > start[i].pageX) {\n          thisInstance.state[thisInstance.inputMap['d']] = true\n        }\n        if (move[i].pageY < start[i].pageY) {\n          thisInstance.state[thisInstance.inputMap['w']] = true\n        }\n        if (move[i].pageY > start[i].pageY) {\n          thisInstance.state[thisInstance.inputMap['s']] = true\n        }\n        thisInstance.notify()\n      }\n    }\n\n    function handleTouchEnd (evt): void {\n      evt.preventDefault()\n      thisInstance.reset()\n    }\n  }\n\n  shoot (): void {\n    this.state[this.inputMap['space']] = true\n  }\n\n  cancelShoot (): void {\n    this.state[this.inputMap['space']] = false\n  }\n\n  reset (): void {\n    this.state[this.inputMap['w']] = false\n    this.state[this.inputMap['a']] = false\n    this.state[this.inputMap['s']] = false\n    this.state[this.inputMap['d']] = false\n  }\n}\n","export enum ContextId {\n  BACKGROUND, MAIN, SHIP\n}\n","/**\n *\n */\nexport enum AssetId {\n  PLAYER = 'ship',\n  ENEMY = 'enemy',\n  ENEMY_BULLET = 'bulletEnemy',\n  PLAYER_BULLET = 'bullet',\n  BACKGROUND = 'background',\n  MAP = 'map',\n  GAME_OVER = 'gameOver',\n  LASER = 'laser',\n  MAIN_THEME = 'shockWave',\n  EXPLOSION_I = 'explosion1',\n  EXPLOSION_II = 'explosion2',\n  BOX = 'box',\n  ARENA = 'arena'\n}\n","import SpriteSheet from '../graphics/2D/SpriteSheet'\nimport Sound from '../audio/Sound'\nimport Ajax from '../ajax/Ajax'\nimport { AssetId } from '../../enum/AssetId'\nimport AudioManager from './AudioManager'\n\nexport enum AssetType {\n  SPRITE = 'SPRITE', SPRITE_SHEET = 'SPRITE_SHEET', AUDIO = 'AUDIO', AUDIO_AMB = 'LOOP'\n}\n\n/**\n * Asset manager Class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class AssetManager {\n  private cache\n  private queue\n  private downloadCount: number\n  private audioManager: AudioManager\n\n  /**\n   * Constructor.\n   *\n   * @param {AudioManager} audioManager\n   */\n  constructor (audioManager: AudioManager) {\n    this.cache = {\n      sprites: {},\n      spriteSheets: {},\n      audio: {}\n    }\n    this.downloadCount = 0\n    this.queue = []\n    this.audioManager = audioManager\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  done (): boolean {\n    return this.downloadCount === this.queue.length\n  }\n\n  /**\n   *\n   * @param {AssetId} id\n   * @param {string} path\n   * @param {AssetType} type\n   * @param {{}} opts\n   */\n  queueDownload (id: AssetId, path: string, type: AssetType, opts = null): void {\n    this.queue.push({\n      id: id,\n      path: path,\n      type: type,\n      opts: opts\n    })\n  }\n\n  /**\n   * Build an AJAX Request to loadAudio audio file into the buffer cache.\n   *\n   * @param item object with name of file and path to file\n   * @param callback function to execute on done\n   */\n  loadAudio (item, callback): void {\n    Ajax.create({\n      method: 'GET',\n      url: item.path,\n      responseType: 'arraybuffer'\n    }, response => {\n      this.audioManager.decodeAudio(response, item.id, buffer => {\n        this.cache.audio[item.id] = buffer\n        this.downloadCount += 1\n        if (this.done()) {\n          callback()\n        }\n      })\n    })\n  }\n\n  /**\n   *\n   * @param item\n   * @param callback\n   */\n  loadSprite (item, callback): void {\n    let sprite = new Image()\n    sprite.addEventListener('load', () => {\n      this.downloadCount++\n      if (this.done()) {\n        callback()\n      }\n    })\n    sprite.src = item.path\n    this.cache.sprites[item.id] = sprite\n  }\n\n  /**\n   * Load sprites sheet.\n   *\n   * @param item sprite sheet info\n   * @param callback called upon downloading all\n   */\n  loadSpriteSheet (item, callback): void {\n    let spriteSheet = new Image()\n    spriteSheet.addEventListener('load', () => {\n      this.cache.spriteSheets[item.id] = new SpriteSheet(spriteSheet, item.opts.frameWidth || 0, item.opts.frameHeight || 0)\n      this.downloadCount += 1\n      if (this.done()) {\n        callback()\n      }\n    })\n    spriteSheet.src = item.path\n  }\n\n  /**\n   *\n   * @param callback\n   */\n  downloadAll (callback): void {\n    this.queue.forEach(item => {\n      if (item.type === AssetType.AUDIO) {\n        this.loadAudio(item, callback)\n      } else if (item.type === AssetType.SPRITE) {\n        this.loadSprite(item, callback)\n      } else if (item.type === AssetType.SPRITE_SHEET) {\n        this.loadSpriteSheet(item, callback)\n      }\n    })\n  }\n\n  /**\n   * Create an audio buffer source node from cached buffer.\n   * Send it to the destination of the audio context and play it.\n   *\n   * @param {AssetId} id file id\n   * @param {AssetType} type\n   */\n  getSound (id: AssetId, type: AssetType): Sound {\n    let ambient = type === AssetType.AUDIO_AMB\n    return this.audioManager.createSound(this.cache.audio[id], ambient)\n  }\n\n  /**\n   *\n   * @param {AssetId} id\n   * @returns {any}\n   */\n  getSprite (id: AssetId): any {\n    return this.cache.sprites[id]\n  }\n\n  /**\n   * Get sprite sheet by name.\n   *\n   * @param {AssetId} id\n   * @returns {SpriteSheet}\n   */\n  getSpriteSheet (id: AssetId): SpriteSheet {\n    return this.cache.spriteSheets[id]\n  }\n}\n","import Vector2 from '../math/Vector2'\nimport ICollideAble, { EntityType } from '../interfaces/ICollideAble'\n\n/**\n * Hitbox used for defining collision boundaries.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class HitBox implements ICollideAble {\n  type: EntityType\n  collidesWith\n  colliding: boolean\n  position: Vector2\n  width: number\n  height: number\n\n  /**\n   * Initializes position and dimension.\n   * @param {number} x position x\n   * @param {number} y position y\n   * @param {number} width dimension width\n   * @param {number} height dimension height\n   */\n  constructor (x, y, width, height) {\n    this.position = new Vector2(x, y)\n    this.width = width\n    this.height = height\n    this.colliding = false\n    this.collidesWith = []\n    this.type = EntityType.BOX\n    this.collidesWith.push(EntityType.PLAYER)\n  }\n\n  /**\n   *\n   * @param {ICollideAble} other\n   * @returns {boolean}\n   */\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","/**\n * Wrapper class for event handler convenience functions.\n */\nexport default class EventHandler {\n  /**\n   * Register multiple events with the same event listener on one element.\n   *\n   * @param {HTMLElement} element html element to add the events to\n   * @param {Array<string>} events the events to be registered\n   * @param {EventListener} listener the event listener function\n   */\n  static registerOnElement (element: HTMLElement, events: Array<string>, listener: EventListener): void {\n    events.forEach(event => element.addEventListener(event, listener))\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport Pool from './Pool'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport SpaceGame from '../application/SpaceGame'\nimport Sound from '../lib/audio/Sound'\nimport Settings from '../config/Settings'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Entity from '../lib/entity/Entity'\nimport Dimension from '../lib/geometry/Dimension'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n * Enemy ship class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Enemy extends Entity implements IRenderable, IMovable, ICollideAble {\n  contextId: ContextId\n  velocity: Vector2\n  acceleration: Vector2\n  speed: number\n  speedX: number\n  speedY: number\n  leftEdge: number\n  rightEdge: number\n  bottomEdge: number\n  sprite: any\n  percentFire: number\n  chance: number\n  alive: boolean\n  bulletPool: Pool\n  collidesWith\n  type: EntityType\n  colliding: boolean\n  explosionSound: Sound\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   * @param {number} speed\n   * @param sprite\n   * @param {EntityType} type\n   * @param {Pool} bulletPool\n   * @param {Settings} settings\n   */\n  constructor (x: number, y: number, width: number, height: number, speed: number, sprite, type: EntityType, bulletPool: Pool, settings: Settings) {\n    super(new Vector2(x, y), new Dimension(width, height), settings)\n    this.speed = speed\n    this.sprite = sprite\n    this.percentFire = 0.001\n    this.chance = 0\n    this.alive = false\n    this.type = type\n    this.collidesWith = []\n    this.collidesWith.push(EntityType.PLAYER_BULLET)\n    this.colliding = false\n    this.bulletPool = bulletPool\n  }\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} speed\n   */\n  spawn (x: number, y: number, speed: number): void {\n    this.position.x = x\n    this.position.y = y\n    this.speed = speed\n    this.speedX = 0\n    this.speedY = speed\n    this.alive = true\n    this.leftEdge = this.position.x - 180\n    this.rightEdge = this.position.x + 180\n    this.bottomEdge = this.position.y + 280\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    ctx.clearRect(this.position.x - 1, this.position.y, this.dimension.width + 1, this.dimension.height)\n  }\n\n  move (dt: number): void {\n    if (!this.colliding) {\n      this.position.x += this.speedX\n      this.position.y += this.speedY\n      if (this.position.x <= this.leftEdge) {\n        this.speedX = this.speed\n      } else if (this.position.x >= this.rightEdge + this.dimension.width) {\n        this.speedX = -this.speed\n      } else if (this.position.y >= this.bottomEdge) {\n        this.speed = 1.5\n        this.speedY = 0\n        this.position.y -= 5\n        this.speedX = -this.speed\n      }\n      this.chance = Math.floor(Math.random() * 101)\n      if (this.chance / 100 < this.percentFire) {\n        this.fire()\n      }\n    } else {\n      // this.game.scorePoints()\n    }\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    ctx.drawImage(this.sprite, this.position.x, this.position.y)\n  }\n\n  /**\n   *\n   */\n  fire (): void {\n    this.bulletPool.get(Math.floor(this.position.x + this.dimension.width / 2), Math.floor(this.position.y + this.dimension.height), -5)\n  }\n\n  /**\n   *\n   */\n  reset (): void {\n    this.position.x = 0\n    this.position.y = 0\n    this.speed = 0\n    this.speedX = 0\n    this.speedY = 0\n    this.alive = false\n    this.colliding = false\n  }\n\n  /**\n   *\n   * @param {ICollideAble} other\n   */\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport Entity from '../lib/entity/Entity'\nimport Settings from '../config/Settings'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Dimension from '../lib/geometry/Dimension'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n *\n */\nexport default class Bullet extends Entity implements IRenderable, IMovable, ICollideAble {\n  contextId: ContextId\n  velocity: Vector2\n  acceleration: Vector2\n  speed: number\n  sprite: any\n  alive: boolean\n  collidesWith\n  type: EntityType\n  colliding: boolean\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   * @param {number} speed\n   * @param {any} sprite\n   * @param {string} type\n   * @param settings\n   */\n  constructor (x: number, y: number, width: number, height: number, speed: number, sprite: any, type: EntityType, settings: Settings) {\n    super(new Vector2(x, y), new Dimension(width, height), settings)\n    this.speed = speed\n    this.sprite = sprite\n    this.alive = false\n    this.type = type\n    this.colliding = false\n    this.collidesWith = []\n    if (this.type === EntityType.PLAYER_BULLET) {\n      this.collidesWith.push(EntityType.ENEMY)\n    } else if (this.type === EntityType.ENEMY_BULLET) {\n      this.collidesWith.push(EntityType.PLAYER)\n    }\n    this.settings = settings\n  }\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} speed\n   */\n  spawn (x: number, y: number, speed: number): void {\n    this.position.set(x, y)\n    this.speed = speed\n    this.alive = true\n  }\n\n  move (dt: number): void {\n    this.position.y -= this.speed\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    ctx.clearRect(this.position.x - 1, this.position.y - 1, this.dimension.width + 1, this.dimension.height + 1)\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    /* if (this.type === EntityType.PLAYER_BULLET && this.position.y <= 0 - this.dimension.height) {\n    } else if (this.type === EntityType.ENEMY_BULLET && this.position.y >= this.settings.gameSize.height) {\n    } else { }*/\n    ctx.drawImage(this.sprite, this.position.x, this.position.y)\n  }\n\n  reset (): void {\n    this.position.set(0, 0)\n    this.speed = 0\n    this.alive = false\n    this.colliding = false\n  }\n\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","import AssetManager from '../lib/client/AssetManager'\nimport Bullet from './Bullet'\nimport Enemy from './Enemy'\nimport { EntityType } from '../lib/interfaces/ICollideAble'\nimport { AssetId } from '../enum/AssetId'\nimport Settings from '../config/Settings'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport { ContextId } from '../enum/ContextId'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Vector2 from '../lib/math/Vector2'\n\n/**\n *\n */\nexport default class Pool implements IRenderable, IMovable {\n  velocity: Vector2\n  acceleration: Vector2\n  contextId: ContextId\n  assetManager: AssetManager\n  maxSize: number\n  type: EntityType\n  assetId: AssetId\n  pool: any[]\n  subPool: Pool\n  settings: Settings\n\n  /**\n   *\n   * @param {AssetManager} assetManager\n   * @param {number} maxSize\n   * @param {EntityType} type\n   * @param {AssetId} asId\n   * @param {Settings} settings\n   * @param {Pool} pool\n   */\n  constructor (assetManager: AssetManager, maxSize: number, type: EntityType, asId: AssetId, settings: Settings, pool: Pool = null) {\n    this.assetManager = assetManager\n    this.maxSize = maxSize\n    this.type = type\n    this.assetId = asId\n    this.pool = []\n    this.subPool = pool\n    this.settings = settings\n    this.contextId = ContextId.MAIN\n    this.init()\n  }\n\n  /**\n   *\n   */\n  init (): void {\n    let sprite = this.assetManager.getSprite(this.assetId)\n    if (this.type === EntityType.ENEMY) {\n      for (let i = 0; i < this.maxSize; i++) {\n        this.pool[i] = new Enemy(0, 0, sprite.width, sprite.height, 0, sprite, this.type, this.subPool, this.settings)\n      }\n    } else {\n      for (let i = 0; i < this.maxSize; i++) {\n        this.pool[i] = new Bullet(0, 0, sprite.width, sprite.height, 0, sprite, this.type, this.settings)\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} speed\n   */\n  get (x: number, y: number, speed: number): void {\n    let lastElement = this.pool[this.maxSize - 1]\n    if (!lastElement.alive) {\n      lastElement.spawn(x, y, speed)\n      this.pool.unshift(this.pool.pop())\n    }\n  }\n\n  /**\n   *\n   * @param {number} x1\n   * @param {number} y1\n   * @param {number} speed1\n   * @param {number} x2\n   * @param {number} y2\n   * @param {number} speed2\n   */\n  getTwo (x1: number, y1: number, speed1: number, x2: number, y2: number, speed2: number): void {\n    if (!this.pool[this.maxSize - 1].alive &&\n      !this.pool[this.maxSize - 2].alive) {\n      this.get(x1, y1, speed1)\n      this.get(x2, y2, speed2)\n    }\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    for (let i = 0; i < this.pool.length; i++) {\n      // Only draw until we find a bullet that is not alive\n      if (this.pool[i].alive) {\n        this.pool[i].render(ctx)\n        this.pool[i].reset()\n        this.pool.push((this.pool.splice(i, 1))[0])\n      } else {\n        break\n      }\n    }\n  }\n\n  move (dt: number): void {\n    this.pool.forEach(object => object.move(dt))\n  }\n\n  clearAll (): void {\n    this.pool.forEach(object => object.reset())\n  }\n\n  getPool (): IMovable[] {\n    let objects = []\n    this.pool.forEach(object => {\n      if (object.alive) {\n        objects.push(object)\n      }\n    })\n    return objects\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    this.pool.forEach(object => object.clear(ctx))\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport { EntityType } from '../lib/interfaces/ICollideAble'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport { ContextId } from '../enum/ContextId'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Entity from '../lib/entity/Entity'\nimport Dimension from '../lib/geometry/Dimension'\nimport Settings from '../config/Settings'\n\nexport default class Background extends Entity implements IRenderable, IMovable {\n  velocity: Vector2\n  acceleration: Vector2\n  contextId: ContextId\n  speed: number\n  type: EntityType\n  sprite: any\n\n  /**\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   * @param sprite\n   * @param {Settings} settings\n   */\n  constructor (x: number, y: number, width: number, height: number, sprite: any, settings: Settings) {\n    super(new Vector2(x, y), new Dimension(width, height), settings)\n    this.speed = 1\n    this.sprite = sprite\n    this.type = EntityType.BACKGROUND\n    this.contextId = ContextId.BACKGROUND\n  }\n\n  reset (): void {\n    this.position.set(0, 0)\n  }\n\n  move (dt: number): void {\n    this.position.y += this.speed\n    if (this.position.y >= this.dimension.height) {\n      this.position.y = 0\n    }\n  }\n\n  /**\n   *\n   */\n  render (ctx: CanvasRenderingContext2D): void {\n    ctx.drawImage(this.sprite, this.position.x, this.position.y)\n    ctx.drawImage(this.sprite, this.position.x, this.position.y - this.dimension.height)\n  }\n\n  clear (): void {\n  }\n}\n","import Vector2 from '../lib/math/Vector2'\nimport Pool from './Pool'\nimport Observer from '../lib/observer/Observer'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport { Actions } from '../lib/client/InputManager'\nimport AssetManager, { AssetType } from '../lib/client/AssetManager'\nimport Sound from '../lib/audio/Sound'\nimport { AssetId } from '../enum/AssetId'\nimport Entity from '../lib/entity/Entity'\nimport Settings from '../config/Settings'\nimport IMovable from '../lib/interfaces/IMovable'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport Dimension from '../lib/geometry/Dimension'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n *\n */\nexport default class Ship extends Entity implements IRenderable, IMovable, Observer, ICollideAble {\n  speed: number\n  acceleration: Vector2\n  sprite: any\n  pool: Pool\n  counter: number\n  collidesWith\n  type: EntityType\n  colliding: boolean\n  velocity: Vector2\n  state\n  maxTop: number\n  startPosition\n  settings: Settings\n  laserSound: Sound\n  assetManager: AssetManager\n  contextId: ContextId\n\n  /**\n   *\n   * @param {number} width\n   * @param {number} height\n   * @param {number} canvasWidth\n   * @param {number} canvasHeight\n   * @param context\n   * @param {AssetManager} assetManager\n   * @param {Pool} pool\n   * @param settings\n   */\n  constructor (width: number, height: number, assetManager: AssetManager, pool: Pool, settings: Settings) {\n    super(new Vector2(0, 0), new Dimension(width, height), settings)\n    this.startPosition = new Vector2(0, 0)\n    this.acceleration = new Vector2(0, 0)\n    this.velocity = new Vector2(0, 0)\n    this.sprite = assetManager.getSprite(AssetId.PLAYER)\n    this.type = EntityType.PLAYER\n    this.pool = pool\n    this.counter = 0\n    this.collidesWith = []\n    this.collidesWith.push(EntityType.ENEMY_BULLET)\n    this.colliding = false\n    this.state = {}\n    this.settings = settings\n    this.assetManager = assetManager\n    this.maxTop = Math.floor(this.settings.gameSize.height / 4 * 3)\n    this.laserSound = assetManager.getSound(AssetId.LASER, AssetType.AUDIO)\n    this.contextId = ContextId.SHIP\n  }\n\n  init (): void {\n    const startX = this.settings.gameSize.width / 2 - this.assetManager.getSprite(AssetId.PLAYER).width\n    const startY = this.settings.gameSize.height / 4 * 3 + this.assetManager.getSprite(AssetId.PLAYER).height * 2\n    this.position.setVector(new Vector2(startX, startY))\n    this.velocity.set(0, 0)\n    this.colliding = false\n  }\n\n  clear (ctx: CanvasRenderingContext2D): void {\n    ctx.clearRect(Math.floor(this.position.x), Math.floor(this.position.y), this.dimension.width, this.dimension.height)\n  }\n\n  /**\n   *\n   */\n  move (dt: number): void {\n    if (!this.colliding) {\n      this.counter++\n      this.acceleration.set(0, 0)\n      if (this.state[Actions.LEFT]) {\n        this.acceleration.add(-this.settings.player.acceleration, 0)\n      }\n      if (this.state[Actions.RIGHT]) {\n        this.acceleration.add(this.settings.player.acceleration, 0)\n      }\n      if (this.state[Actions.UP]) {\n        this.acceleration.add(0, -this.settings.player.acceleration)\n      }\n      if (this.state[Actions.DOWN]) {\n        this.acceleration.add(0, this.settings.player.acceleration)\n      }\n      this.velocity.multiply(this.settings.player.friction)\n      this.velocity.addVector(this.acceleration)\n      this.velocity.limit(this.settings.player.maxVelocity)\n      const vel = this.velocity.clone()\n      vel.multiply(dt)\n      this.position.addVector(vel)\n      if (this.position.x <= 0) {\n        this.position.x = 0\n        this.velocity.x += -1\n      }\n      if (this.position.x >= this.settings.gameSize.width - this.dimension.width) {\n        this.position.x = this.settings.gameSize.width - this.dimension.width\n      }\n      if (this.position.y <= this.maxTop) {\n        this.position.y = this.maxTop\n      }\n      if (this.position.y >= this.settings.gameSize.height - this.dimension.height) {\n        this.position.y = this.settings.gameSize.height - this.dimension.height\n      }\n\n      if (this.state[Actions.SHOOT] && this.counter >= this.settings.player.fireDelay && !this.colliding) {\n        this.fire()\n        this.counter = 0\n      }\n    }\n  }\n\n  alive (): boolean {\n    return !this.colliding\n  }\n\n  render (ctx: CanvasRenderingContext2D): void {\n    ctx.drawImage(this.sprite, Math.floor(this.position.x), Math.floor(this.position.y))\n  }\n\n  update (state: any): void {\n    this.state = state\n  }\n\n  fire (): void {\n    this.pool.getTwo(\n      Math.floor(this.position.x) + 12, Math.floor(this.position.y), 6,\n      Math.floor(this.position.x) + 66, Math.floor(this.position.y), 6\n    )\n    this.laserSound.play()\n  }\n\n  /**\n   *\n   * @param {ICollideAble} other\n   * @returns {boolean}\n   */\n  isCollideAbleWith (other: ICollideAble): boolean {\n    return this.collidesWith.includes(other.type.toString())\n  }\n}\n","import HitBox from './HitBox'\nimport ICollideAble from '../interfaces/ICollideAble'\n\n/**\n * QuadTree class used to optimize collision checking.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class QuadTree {\n  level: number\n  maxObjects: number\n  maxLevels: number\n  hitBox: HitBox\n  objects: ICollideAble[]\n  nodes: QuadTree[]\n\n  /**\n   * Constructor.\n   *\n   * @param {HitBox} hitBox\n   * @param {number} level\n   */\n  constructor (hitBox = new HitBox(0, 0, 0, 0), level = 0) {\n    this.level = level\n    this.maxObjects = 10\n    this.maxLevels = 5\n    this.hitBox = hitBox\n    this.objects = []\n    this.nodes = []\n  }\n\n  /**\n   * Clears the QuadTree and its sub nodes from all models objects.\n   */\n  clear (): void {\n    this.objects = []\n    this.nodes.forEach(node => node.clear())\n    this.nodes = []\n  }\n\n  /**\n   *\n   * @param returnedObjects\n   * @returns {any}\n   */\n  getAllObjects (returnedObjects) {\n    this.nodes.forEach(node => node.getAllObjects(returnedObjects))\n    this.objects.forEach(object => returnedObjects.push(object))\n    return returnedObjects\n  }\n\n  /**\n   *\n   * @param returnedObjects\n   * @param object\n   * @returns {any}\n   */\n  findObjects (returnedObjects, object) {\n    if (typeof object === 'undefined') {\n      console.log('UNDEFINED OBJECT')\n      return\n    }\n    let index = this.getIndex(object)\n    if (index !== -1 && this.nodes.length) {\n      this.nodes[index].findObjects(returnedObjects, object)\n    }\n    this.objects.forEach(obj => returnedObjects.push(obj))\n    return returnedObjects\n  }\n\n  /**\n   * Insert an object into the QuadTree.\n   *\n   * @param object\n   */\n  insert (object): void {\n    if (typeof object === 'undefined') {\n      return\n    }\n    if (object instanceof Array) {\n      object.forEach(element => this.insert(element))\n      return\n    }\n    if (this.nodes.length > 0) {\n      let index = this.getIndex(object)\n      // Only addVector the object to a sub node if it can fit completely within one\n      if (index !== -1) {\n        this.nodes[index].insert(object)\n        return\n      }\n    }\n    this.objects.push(object)\n\n    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\n      if (typeof this.nodes[0] === 'undefined') {\n        this.split()\n      }\n      let i = 0\n      while (i < this.objects.length) {\n        let index = this.getIndex(this.objects[i])\n        if (index !== -1) {\n          this.nodes[index].insert((this.objects.splice(i, 1))[0])\n        } else {\n          i++\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the index of an object from the QuadTree.\n   *\n   * @param object\n   * @returns {number}\n   */\n  getIndex (object): number {\n    let index = -1\n    let verticalMidpoint = this.hitBox.position.x + this.hitBox.width / 2\n    let horizontalMidpoint = this.hitBox.position.y + this.hitBox.height / 2\n    // Object can fit completely within the top quadrant\n    let topQuadrant = (object.position.y < horizontalMidpoint && object.position.y + object.height < horizontalMidpoint)\n    // Object can fit completely within the bottom quadrant\n    let bottomQuadrant = (object.position.y > horizontalMidpoint)\n    // Object can fit completely within the left quadrants\n    if (object.position.x < verticalMidpoint && object.position.x + object.width < verticalMidpoint) {\n      if (topQuadrant) {\n        index = 1\n      } else if (bottomQuadrant) {\n        index = 2\n      }\n    } else if (object.position.x > verticalMidpoint) { // Object can fix completely within the right quadrants\n      if (topQuadrant) {\n        index = 0\n      } else if (bottomQuadrant) {\n        index = 3\n      }\n    }\n    return index\n  }\n\n  /**\n   * Split the tree on demand.\n   */\n  split (): void {\n    let subWidth = (this.hitBox.width / 2) | 0\n    let subHeight = (this.hitBox.height / 2) | 0\n    this.nodes[0] = new QuadTree(\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\n    this.nodes[1] = new QuadTree(\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\n    this.nodes[2] = new QuadTree(\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\n    this.nodes[3] = new QuadTree(\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\n  }\n}\n","import IGameState from '../lib/interfaces/IGameState'\nimport ICollideAble, { EntityType } from '../lib/interfaces/ICollideAble'\nimport QuadTree from '../lib/collision/QuadTree'\nimport Settings from '../config/Settings'\nimport InputManager from '../lib/client/InputManager'\nimport { default as AssetManager, AssetType } from '../lib/client/AssetManager'\nimport Ship from '../models/Ship'\nimport HitBox from '../lib/collision/HitBox'\nimport { AssetId } from '../enum/AssetId'\nimport Background from '../models/Background'\nimport Pool from '../models/Pool'\nimport IRenderable from '../lib/interfaces/IRenderable'\nimport Entity from '../lib/entity/Entity'\nimport IMovable from '../lib/interfaces/IMovable'\nimport Sound from '../lib/audio/Sound'\n\n/**\n * Multiverse invaders game state.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class InvadersState implements IGameState {\n  running: boolean\n  paused: boolean\n  quadTree: QuadTree\n  entities: Entity[]\n  renderables: IRenderable[]\n  collideables: ICollideAble[]\n  movables: IMovable[]\n  pools: Pool[]\n  assetManager: AssetManager\n  backgroundAudio: Sound\n  gameOverAudio: Sound\n  playerScore: number\n\n  /**\n   *\n   * @param {Settings} settings\n   * @param {InputManager} inputManager\n   * @param {AssetManager} assetManager\n   */\n  constructor (settings: Settings, inputManager: InputManager, assetManager: AssetManager) {\n    this.assetManager = assetManager\n    this.running = false\n    this.paused = false\n    this.playerScore = 0\n    const background = new Background(\n      0,\n      0,\n      settings.gameSize.width,\n      settings.gameSize.height,\n      assetManager.getSprite(AssetId.BACKGROUND),\n      settings\n    )\n    const playerBulletPool = new Pool(this.assetManager, 80, EntityType.PLAYER_BULLET, AssetId.PLAYER_BULLET, settings)\n    const ship = new Ship(assetManager.getSprite(AssetId.PLAYER).width, assetManager.getSprite(AssetId.PLAYER).height, assetManager, playerBulletPool, settings)\n    const enemyBulletPool = new Pool(this.assetManager, 50, EntityType.ENEMY_BULLET, AssetId.ENEMY_BULLET, settings)\n    const enemyPool = new Pool(this.assetManager, 30, EntityType.ENEMY, AssetId.ENEMY, settings, enemyBulletPool)\n    this.quadTree = new QuadTree(new HitBox(0, 0, settings.gameSize.width, settings.gameSize.height))\n    this.pools = []\n    this.entities = []\n    this.renderables = []\n    this.collideables = []\n    this.movables = []\n\n    this.pools.push(playerBulletPool)\n    this.pools.push(enemyBulletPool)\n    this.pools.push(enemyPool)\n    this.entities.push(ship)\n    this.movables.push(ship)\n    this.renderables.push(ship)\n    this.entities.push(background)\n    this.movables.push(background)\n    this.movables.push(enemyPool)\n    this.movables.push(playerBulletPool)\n    this.movables.push(enemyBulletPool)\n    this.renderables.push(background)\n    this.renderables.push(playerBulletPool)\n    this.renderables.push(enemyBulletPool)\n    this.renderables.push(enemyPool)\n\n    this.backgroundAudio = this.assetManager.getSound(AssetId.MAIN_THEME, AssetType.AUDIO_AMB)\n    this.backgroundAudio.play(true)\n    this.spawnWave()\n    inputManager.register(ship)\n  }\n\n  /**\n   *\n   */\n  spawnWave (): void {\n    const height = this.assetManager.getSprite(AssetId.ENEMY).height\n    const width = this.assetManager.getSprite(AssetId.ENEMY).width\n    let x = 200\n    let y = -height\n    const spacer = y * 1.5\n    for (let i = 1; i <= 21; i++) {\n      this.pools[1].get(x, y, 4)\n      x += width + 25\n      if (i % 7 === 0) {\n        x = 200\n        y += spacer\n      }\n    }\n  }\n\n  scorePoints (): void {\n    this.playerScore += 10\n  }\n\n  gameOver (): void {\n    this.backgroundAudio.stop()\n    document.getElementById('game-over').style.display = 'block'\n    this.gameOverAudio = this.assetManager.getSound(AssetId.GAME_OVER, AssetType.AUDIO_AMB)\n    this.gameOverAudio.play(true)\n  }\n\n  reset (): void {\n    this.gameOverAudio.stop()\n    this.backgroundAudio.play(true)\n    document.getElementById('game-over').style.display = 'none'\n    this.quadTree.clear()\n    this.entities.forEach(entity => entity.init())\n    this.pools.forEach(pool => pool.clearAll())\n    this.playerScore = 0\n  }\n}\n","import IGameLoop from '../lib/interfaces/IGameLoop'\nimport IGame from '../lib/interfaces/IGame'\n\n/**\n * Game loop.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class GameLoop implements IGameLoop {\n  public game: IGame\n  public lastTime: number\n  public frameId: number\n\n  /**\n   * Constructor.\n   *\n   * @param {IGame} game Game instance\n   */\n  constructor (game: IGame) {\n    this.game = game\n    this.lastTime = null\n  }\n\n  /**\n   *\n   */\n  public start (): void {\n    this.game.init()\n    this.game.state.running = true\n    this.frameId = requestAnimationFrame(time => this.loop(time))\n  }\n\n  /**\n   *\n   */\n  public stop (): void {\n    this.game.state.running = false\n    if (this.frameId) {\n      cancelAnimationFrame(this.frameId)\n    }\n  }\n\n  public restart (): void {\n    this.stop()\n    this.start()\n  }\n\n  /**\n   *\n   */\n  public togglePause (): void {\n    this.game.state.paused = !this.game.state.paused\n  }\n\n  /**\n   *\n   */\n  public loop (time: number): void {\n    if (this.game.state.running) {\n      this.game.clear()\n      if (this.lastTime !== null) {\n        const diff = time - this.lastTime\n        if (!this.game.state.paused) {\n          this.game.update(diff / 1000)\n        }\n      }\n      this.lastTime = time\n      this.game.render()\n      this.frameId = requestAnimationFrame(time => this.loop(time))\n    }\n  }\n}","/**\n * Sound class used to play a sound from a file.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Sound {\n  audioContext: AudioContext\n  source: AudioBufferSourceNode\n  gainNode: GainNode\n  masterGain: GainNode\n  buffer\n  playing: boolean\n\n  /**\n   *\n   * @param audioContext\n   * @param {GainNode} masterGain\n   * @param buffer\n   */\n  constructor (audioContext, masterGain: GainNode, buffer) {\n    this.audioContext = audioContext\n    this.masterGain = masterGain\n    this.buffer = buffer\n    this.gainNode = this.audioContext.createGain()\n    this.gainNode.gain.value = 0.2\n    this.gainNode.connect(this.masterGain)\n    this.playing = false\n  }\n\n  /**\n   *\n   * @param {boolean} loop\n   */\n  play (loop = false): void {\n    this.source = this.audioContext.createBufferSource()\n    this.source.buffer = this.buffer\n    this.source.loop = loop\n    this.source.connect(this.gainNode)\n    this.source.start(0)\n  }\n\n  /**\n   *\n   */\n  stop (): void {\n    this.source.stop(0)\n  }\n}\n","import Sound from '../audio/Sound'\n\n/**\n * Audiomanager class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class AudioManager {\n  private audioContext: AudioContext\n  private masterGain: GainNode\n  private effectsGain: GainNode\n  private ambientGain: GainNode\n\n  /**\n   *\n   */\n  constructor () {\n    this.initAudioContext()\n  }\n\n  /**\n   *\n   */\n  initAudioContext (): void {\n    try {\n      // Fix for browsers using prefixes\n      window.AudioContext = window.AudioContext || webkitAudioContext\n      this.audioContext = new AudioContext()\n      this.masterGain = this.audioContext.createGain()\n      this.effectsGain = this.audioContext.createGain()\n      this.ambientGain = this.audioContext.createGain()\n      this.masterGain.gain.value = 1\n      this.masterGain.connect(this.audioContext.destination)\n      this.effectsGain.connect(this.masterGain)\n      this.ambientGain.connect(this.masterGain)\n      this.ambientGain.gain.value = 1\n      this.effectsGain.gain.value = 1\n    } catch (e) {\n      console.log('Web Audio API is not supported in this browser')\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @param id\n   * @param callback\n   */\n  decodeAudio (data, id, callback): void {\n    this.audioContext.decodeAudioData(data).then(\n      buffer => callback(buffer),\n      error => { console.log('Error with decoding audio data' + error) }\n    )\n  }\n\n  /**\n   *\n   * @param {number} value\n   */\n  adjustMasterVolume (value: number): void {\n    this.masterGain.gain.value = value\n  }\n\n  /**\n   *\n   * @param {number} value\n   */\n  adjustAmbientVolume (value: number): void {\n    this.ambientGain.gain.value = value\n  }\n\n  /**\n   *\n   * @param {number} value\n   */\n  adjustEffectsVolume (value: number): void {\n    this.effectsGain.gain.value = value\n  }\n\n  /**\n   *\n   * @param buffer\n   * @param {boolean} ambient\n   * @returns {Sound}\n   */\n  createSound (buffer, ambient: boolean): Sound {\n    return new Sound(this.audioContext, ambient ? this.ambientGain : this.effectsGain, buffer)\n  }\n}\n","import Settings from '../../config/Settings'\nimport { Actions } from './InputManager'\nimport AssetManager from './AssetManager'\nimport EventHandler from '../event/EventHandler'\nimport AudioManager from './AudioManager'\n\n/**\n * Simple settings menu.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class SettingsMenu {\n  element: HTMLDivElement\n  mainMenu: HTMLDivElement\n  settings: Settings\n  assetManager: AssetManager\n  audioManager: AudioManager\n  showing: boolean\n\n  constructor (element, settings: Settings, assetManager: AssetManager, audioManager: AudioManager) {\n    this.element = element\n    this.settings = settings\n    this.assetManager = assetManager\n    this.audioManager = audioManager\n    this.showing = false\n  }\n\n  createMainMenu (): void {\n    this.mainMenu = document.createElement('div')\n    this.mainMenu.classList.add('tab')\n    this.element.appendChild(this.mainMenu)\n  }\n\n  openTab (event, tabId: string): void {\n    let tabContent\n    let tabLink\n    tabContent = document.getElementsByClassName('tabContent')\n    for (let i = 0; i < tabContent.length; i++) {\n      tabContent[i].style.display = 'none'\n    }\n    tabLink = document.getElementsByClassName('tabLink')\n    for (let i = 0; i < tabLink.length; i++) {\n      tabLink[i].className = tabLink[i].className.replace(' active', '')\n    }\n    document.getElementById(tabId).style.display = 'block'\n    event.currentTarget.className += ' active'\n  }\n\n  createKeyboardMenu (): void {\n    let keyboardMenuId = 'keyboardMenu'\n    let keyboardLink = document.createElement('button')\n    let keyboardDiv = document.createElement('div')\n    let title = document.createElement('h4')\n    let form = document.createElement('form')\n    let submit = document.createElement('input')\n    EventHandler.registerOnElement(\n      keyboardLink,\n      ['click', 'touchstart'],\n      event => this.openTab(event, keyboardMenuId)\n    )\n    keyboardLink.appendChild(document.createTextNode('Keyboard'))\n    keyboardLink.classList.add('tabLink')\n    this.mainMenu.appendChild(keyboardLink)\n    keyboardDiv.setAttribute('id', keyboardMenuId)\n    keyboardDiv.classList.add('tabContent')\n    title.appendChild(document.createTextNode('Keyboard'))\n    form.setAttribute('id', 'keyboardSettings')\n    form.setAttribute('method', 'post')\n    submit.setAttribute('type', 'submit')\n    submit.setAttribute('value', 'Save')\n    keyboardDiv.appendChild(title)\n    keyboardDiv.appendChild(form)\n    this.element.appendChild(keyboardDiv)\n    Object.keys(this.settings.keyBoard).forEach(setting => this.addEntry(setting, form))\n    form.appendChild(submit)\n    form.addEventListener('submit', event => {\n      event.preventDefault()\n      this.settings.setKey((document.getElementById(Actions.UP) as HTMLInputElement).value, Actions.UP)\n      this.settings.setKey((document.getElementById(Actions.DOWN) as HTMLInputElement).value, Actions.DOWN)\n      this.settings.setKey((document.getElementById(Actions.LEFT) as HTMLInputElement).value, Actions.LEFT)\n      this.settings.setKey((document.getElementById(Actions.RIGHT) as HTMLInputElement).value, Actions.RIGHT)\n      this.settings.setKey((document.getElementById(Actions.SHOOT) as HTMLInputElement).value, Actions.SHOOT)\n      this.settings.setKey((document.getElementById(Actions.RESTART) as HTMLInputElement).value, Actions.RESTART)\n      this.clear()\n    })\n  }\n\n  createPlayerMenu (): void {\n    let playerMenuId = 'playerMenu'\n    let playerLink = document.createElement('button')\n    let playerDiv = document.createElement('div')\n    let playerTitle = document.createElement('h4')\n    let playerForm = document.createElement('form')\n    let playerSubmit = document.createElement('input')\n    EventHandler.registerOnElement(\n      playerLink,\n      ['click', 'touchstart'],\n      event => this.openTab(event, playerMenuId)\n    )\n    playerLink.appendChild(document.createTextNode('Player'))\n    playerLink.classList.add('tabLink')\n    this.mainMenu.appendChild(playerLink)\n    playerDiv.setAttribute('id', playerMenuId)\n    playerDiv.classList.add('tabContent')\n    playerTitle.appendChild(document.createTextNode('Player Settings'))\n    playerForm.setAttribute('id', 'playerSettings')\n    playerForm.setAttribute('method', 'post')\n    playerSubmit.setAttribute('type', 'submit')\n    playerSubmit.setAttribute('value', 'Save')\n    playerDiv.appendChild(playerTitle)\n    playerDiv.appendChild(playerForm)\n    this.element.appendChild(playerDiv)\n    Object.keys(this.settings.player).forEach(setting => this.addPlayerSettingEntry(setting, playerForm))\n    playerForm.appendChild(playerSubmit)\n    playerForm.addEventListener('submit', event => {\n      event.preventDefault()\n      this.settings.player.acceleration = Number((document.getElementById('acceleration') as HTMLInputElement).value)\n      this.settings.player.maxVelocity = Number((document.getElementById('maxVelocity') as HTMLInputElement).value)\n      this.settings.player.friction = Number((document.getElementById('friction') as HTMLInputElement).value)\n      this.settings.player.fireDelay = Number((document.getElementById('fireDelay') as HTMLInputElement).value)\n      this.clear()\n    })\n  }\n\n  createAudioMenu (): void {\n    let audioMenuId = 'audioMenu'\n    let audioLink = document.createElement('button')\n    let audioDiv = document.createElement('div')\n    let div = document.createElement('div')\n    let audioTitle = document.createElement('h4')\n    let audioLabel = document.createElement('label')\n    let audioSlide = document.createElement('input')\n    EventHandler.registerOnElement(\n      audioLink,\n      ['click', 'touchstart'],\n      event => this.openTab(event, audioMenuId)\n    )\n    audioLink.classList.add('tabLink')\n    audioLink.appendChild(document.createTextNode('Audio'))\n    this.mainMenu.appendChild(audioLink)\n    audioDiv.setAttribute('id', audioMenuId)\n    audioDiv.classList.add('tabContent')\n    div.classList.add('row')\n    audioTitle.appendChild(document.createTextNode('Audio Settings'))\n    audioLabel.appendChild(document.createTextNode('Master Volume:'))\n    audioLabel.setAttribute('for', 'masterVolume')\n    audioSlide.setAttribute('id', 'masterVolume')\n    audioSlide.setAttribute('type', 'range')\n    audioSlide.setAttribute('min', '0')\n    audioSlide.setAttribute('max', '1')\n    audioSlide.setAttribute('step', '0.1')\n    audioSlide.addEventListener('change', event => this.audioManager.adjustMasterVolume(Number(audioSlide.value)))\n    div.appendChild(audioTitle)\n    div.appendChild(audioLabel)\n    div.appendChild(audioSlide)\n    audioDiv.appendChild(div)\n\n    let ambientDiv = document.createElement('div')\n    let ambientLabel = document.createElement('label')\n    let ambientSlide = document.createElement('input')\n    ambientDiv.classList.add('row')\n    ambientLabel.appendChild(document.createTextNode('Ambient Volume:'))\n    ambientLabel.setAttribute('for', 'ambientVolume')\n    ambientSlide.setAttribute('id', 'ambientVolume')\n    ambientSlide.setAttribute('type', 'range')\n    ambientSlide.setAttribute('min', '0')\n    ambientSlide.setAttribute('max', '1')\n    ambientSlide.setAttribute('step', '0.1')\n    ambientSlide.addEventListener('change', event => this.audioManager.adjustAmbientVolume(Number(ambientSlide.value)))\n    ambientDiv.appendChild(ambientLabel)\n    ambientDiv.appendChild(ambientSlide)\n    audioDiv.appendChild(ambientDiv)\n\n    let effectsDiv = document.createElement('div')\n    let effectsLabel = document.createElement('label')\n    let effectsSlide = document.createElement('input')\n    effectsDiv.classList.add('row')\n    effectsLabel.appendChild(document.createTextNode('Effects Volume:'))\n    effectsLabel.setAttribute('for', 'effectsVolume')\n    effectsSlide.setAttribute('id', 'effectsVolume')\n    effectsSlide.setAttribute('type', 'range')\n    effectsSlide.setAttribute('min', '0')\n    effectsSlide.setAttribute('max', '1')\n    effectsSlide.setAttribute('step', '0.1')\n    effectsSlide.addEventListener('change', event => this.audioManager.adjustEffectsVolume(Number(effectsSlide.value)))\n    effectsDiv.appendChild(effectsLabel)\n    effectsDiv.appendChild(effectsSlide)\n    audioDiv.appendChild(effectsDiv)\n    this.element.appendChild(audioDiv)\n  }\n\n  init (): void {\n    this.createMainMenu()\n    this.createKeyboardMenu()\n    this.createPlayerMenu()\n    this.createAudioMenu()\n  }\n\n  clear (): void {\n    while (this.element.firstChild) {\n      this.element.removeChild(this.element.firstChild)\n    }\n    this.init()\n  }\n\n  addPlayerSettingEntry (setting, element): void {\n    let label = document.createElement('label')\n    let input = document.createElement('input')\n    let row = document.createElement('div')\n    label.setAttribute('for', setting)\n    label.appendChild(document.createTextNode(setting + ':'))\n    input.setAttribute('id', setting)\n    input.setAttribute('type', 'number')\n    input.setAttribute('name', setting)\n    input.setAttribute('value', this.settings.player[setting])\n    row.classList.add('row')\n    row.appendChild(label)\n    row.appendChild(input)\n    element.appendChild(row)\n  }\n\n  addEntry (setting, element): void {\n    let row = document.createElement('div')\n    let label = document.createElement('label')\n    let input = document.createElement('input')\n    row.classList.add('row')\n    label.setAttribute('for', this.settings.keyBoard[setting])\n    label.appendChild(document.createTextNode(this.settings.keyBoard[setting] + ':'))\n    input.setAttribute('id', this.settings.keyBoard[setting])\n    input.setAttribute('type', 'text')\n    input.setAttribute('name', this.settings.keyBoard[setting])\n    input.setAttribute('value', setting)\n    row.appendChild(label)\n    row.appendChild(input)\n    element.appendChild(row)\n  }\n\n  toggleShow (): void {\n    if (this.showing) {\n      this.element.style.display = 'none'\n      this.showing = false\n    } else {\n      this.element.style.display = 'block'\n      this.showing = true\n    }\n  }\n}\n","import { Actions } from '../lib/client/InputManager'\nimport Dimension from '../lib/geometry/Dimension'\n\n/**\n * Settings class for models applications.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Settings {\n  keyBoard\n  player\n  audio\n  gameSize: Dimension\n\n  constructor (canvas: HTMLCanvasElement) {\n    this.keyBoard = {\n      'w': Actions.UP,\n      's': Actions.DOWN,\n      'a': Actions.LEFT,\n      'd': Actions.RIGHT,\n      'space': Actions.SHOOT,\n      'r': Actions.RESTART,\n      'q': Actions.ROTATE_LEFT,\n      'e': Actions.ROTATE_RIGHT\n    }\n    this.player = {\n      maxVelocity: 150,\n      fireDelay: 15,\n      friction: 0.9,\n      acceleration: 50\n    }\n    this.audio = {\n      master: 1,\n      ambient: 1,\n      effects: 1\n    }\n    this.gameSize = new Dimension(canvas.width, canvas.height)\n  }\n\n  findKey (value): string {\n    return Object.keys(this.keyBoard).filter(key => this.keyBoard[key] === value)[0]\n  }\n\n  setKey (newKey, action: Actions): void {\n    let oldKey = this.findKey(action)\n    if (newKey !== oldKey) {\n      console.log('old:' + oldKey, ' new: ' + newKey + ' value: ' + action)\n      this.keyBoard[newKey] = this.keyBoard[oldKey]\n      delete this.keyBoard[oldKey]\n    }\n  }\n}\n","import Observer from './Observer'\n\n/**\n * Observable class to be extended by a class that should be observed.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Observable {\n  private _observers: Observer[]\n  private _state: any\n\n  constructor () {\n    this._observers = []\n    this._state = {}\n  }\n\n  /**\n   * Register an observer on this observable.\n   *\n   * @param {Observer} observer Object implementing the Observer interface\n   */\n  register (observer: Observer): void {\n    this._observers.push(observer)\n  }\n\n  /**\n   * Remove an observer from this observables observers list.\n   *\n   * @param {Observer} observer Object implementing the Observer interface\n   */\n  unRegister (observer: Observer): void {\n    this._observers = this._observers.filter(obs => {\n      return obs !== observer\n    })\n  }\n\n  /**\n   * Notify all observers.\n   */\n  notify (): void {\n    this._observers.forEach(observer => {\n      observer.update(this._state)\n    })\n  }\n\n  /**\n   *\n   * @returns {Observer[]}\n   */\n  get observers (): Observer[] {\n    return this._observers\n  }\n\n  /**\n   *\n   * @param {Observer[]} observers\n   */\n  set observers (observers: Observer[]) {\n    this._observers = observers\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get state (): any {\n    return this._state\n  }\n\n  /**\n   *\n   * @param {any} state\n   */\n  set state (state: any) {\n    this._state = state\n  }\n}\n","import QuadTree from './QuadTree'\n\nexport default class CollisionManager {\n  quadTree: QuadTree\n\n  constructor (quadTree) {\n    this.quadTree = quadTree\n  }\n\n  detectCollision (): void {\n    let objects = []\n    this.quadTree.getAllObjects(objects)\n\n    for (let i = 0; i < objects.length; i++) {\n      let obj = []\n      this.quadTree.findObjects(obj, objects[i])\n\n      for (let j = 0; j < obj.length; j++) {\n        // DETECT COLLISION ALGORITHM\n        if (objects[i].isCollideAbleWith(obj[j]) &&\n          (Math.floor(objects[i].position.x) < Math.floor(obj[j].position.x) + obj[j].width &&\n            Math.floor(objects[i].position.x) + objects[i].width > Math.floor(obj[j].position.x) &&\n            Math.floor(objects[i].position.y) < Math.floor(obj[j].position.y) + obj[j].height &&\n            Math.floor(objects[i].position.y) + objects[i].height > Math.floor(obj[j].position.y))) {\n          objects[i].colliding = true\n          obj[j].colliding = true\n        }\n      }\n    }\n  }\n}","import Background from '../models/Background'\nimport AssetManager from '../lib/client/AssetManager'\nimport InputManager from '../lib/client/InputManager'\nimport Settings from '../config/Settings'\nimport IGame from '../lib/interfaces/IGame'\nimport IGameState from '../lib/interfaces/IGameState'\nimport ICollisionManager from '../lib/interfaces/ICollisionManager'\nimport CollisionManager from '../lib/collision/CollisionManager'\nimport { ContextId } from '../enum/ContextId'\n\n/**\n * Space models main class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class SpaceGame implements IGame {\n  state: IGameState\n  background: Background\n  assetManager: AssetManager\n  inputManager: InputManager\n  collisionManager: ICollisionManager\n  settings: Settings\n  canvases\n  contexts: Map<ContextId, CanvasRenderingContext2D>\n\n  /**\n   *\n   * @param {IGameState} state\n   * @param {AssetManager} assetManager\n   * @param {InputManager} inputManager\n   * @param {Settings} settings\n   * @param canvases\n   */\n  constructor (state: IGameState, assetManager: AssetManager, inputManager: InputManager, settings: Settings, canvases) {\n    this.state = state\n    this.assetManager = assetManager\n    this.inputManager = inputManager\n    this.settings = settings\n    this.canvases = canvases\n    this.collisionManager = new CollisionManager(this.state.quadTree)\n    this.contexts = new Map<ContextId, CanvasRenderingContext2D>()\n    this.init()\n  }\n\n  /**\n   *\n   */\n  public init (): void {\n    if (this.canvases.background.getContext) {\n      this.contexts.set(ContextId.BACKGROUND, this.canvases.background.getContext('2d'))\n      this.contexts.set(ContextId.SHIP, this.canvases.ship.getContext('2d'))\n      this.contexts.set(ContextId.MAIN, this.canvases.main.getContext('2d'))\n      this.contexts.forEach(context => context.clearRect(0, 0, this.settings.gameSize.width, this.settings.gameSize.height))\n    }\n    this.state.entities.forEach(entity => entity.init())\n  }\n\n  /**\n   *\n   */\n  public clear (): void {\n    this.state.renderables.forEach(renderable => renderable.clear(this.contexts.get(renderable.contextId)))\n  }\n\n  /**\n   *\n   * @param {number} dt\n   */\n  public update (dt: number): void {\n    this.state.quadTree.clear()\n    this.state.quadTree.insert(this.state.collideables)\n    this.collisionManager.detectCollision()\n    this.state.movables.forEach(movable => movable.move(dt))\n  }\n\n  /**\n   *\n   */\n  public render (): void {\n    this.state.renderables.forEach(renderable => renderable.render(this.contexts.get(renderable.contextId)))\n  }\n}\n","export default class Ajax {\n  private static defaults = {\n    url: '',\n    method: 'GET',\n    contentType: 'text/html',\n    async: true,\n    data: null\n  }\n\n  /**\n   * Create and send an XML-HTTP request.\n   * Requires an options object.\n   *\n   * @param opts Possible option properties:\n   * url = url to send the request to.\n   * method = request method. GET, POST, PUT, DELETE.\n   * contentType = specify the content type of the request.\n   * async = boolean flag for async calls. Defaults to true.\n   * data = request body.\n   * @param callback success callback function\n   */\n  public static create (opts, callback): void {\n    let xHttp = new XMLHttpRequest()\n    xHttp.addEventListener('load', () => {\n      callback(xHttp.response)\n    })\n    xHttp.open(\n      opts.method ? opts.method : Ajax.defaults.method,\n      opts.url ? opts.url : Ajax.defaults.url,\n      opts.async ? opts.async : Ajax.defaults.async\n    )\n    if (opts.hasOwnProperty('contentType')) {\n      xHttp.setRequestHeader(\n        'Content-Type',\n        opts.contentType ? opts.contentType : Ajax.defaults.contentType\n      )\n    }\n    if (opts.hasOwnProperty('responseType')) {\n      xHttp.responseType = opts.responseType\n    }\n    if (opts.hasOwnProperty('data') && typeof opts.data === 'object') {\n      opts.data = JSON.stringify(opts.data)\n    }\n    xHttp.send(opts.data ? opts.data : null)\n  }\n}\n","/**\n * Sprite sheet definition.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class SpriteSheet {\n  private _image\n  private _frameWidth\n  private _frameHeight\n  private _framesPerRow\n\n  /**\n   * Constructor. Sets frame dimensions and calculates number of frames.\n   *\n   * @param image\n   * @param frameWidth\n   * @param frameHeight\n   */\n  constructor (image: HTMLImageElement, frameWidth, frameHeight) {\n    this._image = image\n    this._frameWidth = frameWidth\n    this._frameHeight = frameHeight\n    this._framesPerRow = Math.floor(this._image.width / this._frameWidth)\n  }\n\n  /**\n   *\n   * @returns {Image}\n   */\n  get image (): HTMLImageElement {\n    return this._image\n  }\n\n  /**\n   *\n   * @param {Image} image\n   */\n  set image (image: HTMLImageElement) {\n    if (!(image instanceof Image)) {\n      throw new Error('Param tileSetImage must be of type Image!')\n    }\n    this._image = image\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  get frameWidth (): number {\n    return this._frameWidth\n  }\n\n  /**\n   *\n   * @param {number} frameWidth\n   */\n  set frameWidth (frameWidth: number) {\n    this._frameWidth = frameWidth\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  get frameHeight (): number {\n    return this._frameHeight\n  }\n\n  /**\n   *\n   * @param {number} frameHeight\n   */\n  set frameHeight (frameHeight: number) {\n    this._frameHeight = frameHeight\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  get framesPerRow (): number {\n    return this._framesPerRow\n  }\n\n  /**\n   *\n   * @param {number} framesPerRow\n   */\n  set framesPerRow (framesPerRow: number) {\n    this._framesPerRow = framesPerRow\n  }\n}\n","import AssetManager, { AssetType } from './lib/client/AssetManager'\nimport SpaceGame from './application/SpaceGame'\nimport InputManager from './lib/client/InputManager'\nimport Settings from './config/Settings'\nimport SettingsMenu from './lib/client/SettingsMenu'\nimport EventHandler from './lib/event/EventHandler'\nimport { AssetId } from './enum/AssetId'\nimport AudioManager from './lib/client/AudioManager'\nimport GameLoop from './application/GameLoop'\nimport InvadersState from './application/InvadersState'\n\nconst audioManager = new AudioManager()\nconst assetManager = new AssetManager(audioManager)\nconst canvases = {\n  background: document.getElementById('background') as HTMLCanvasElement,\n  ship: document.getElementById('ship') as HTMLCanvasElement,\n  main: document.getElementById('main') as HTMLCanvasElement\n}\nconst settings = new Settings(canvases.background)\nconst inputManager = new InputManager(settings)\nconst settingsMenu = new SettingsMenu(document.getElementById('settings-menu'), settings, assetManager, audioManager)\nassetManager.queueDownload(AssetId.BACKGROUND, 'assets/textures/background.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.PLAYER, 'assets/sprites/ship.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.PLAYER_BULLET, 'assets/sprites/bullet.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.ENEMY, 'assets/sprites/enemy.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.ENEMY_BULLET, 'assets/sprites/bullet_enemy.png', AssetType.SPRITE)\nassetManager.queueDownload(AssetId.MAIN_THEME, 'assets/audio/kick_shock.wav', AssetType.AUDIO)\nassetManager.queueDownload(AssetId.LASER, 'assets/audio/laser.wav', AssetType.AUDIO)\nassetManager.queueDownload(AssetId.EXPLOSION_I, 'assets/audio/explosion.wav', AssetType.AUDIO)\nassetManager.queueDownload(AssetId.GAME_OVER, 'assets/audio/game_over.wav', AssetType.AUDIO)\nassetManager.downloadAll(() => {\n  const state = new InvadersState(settings, inputManager, assetManager)\n  const game = new SpaceGame(state, assetManager, inputManager, settings, canvases)\n  const loop = new GameLoop(game)\n  settingsMenu.init()\n  let gameOver = document.getElementById('game-over')\n  let set = document.getElementById('settings')\n  let shoot = document.getElementById('shoot')\n  let events = ['click', 'touchstart']\n  shoot.addEventListener('touchstart', () => inputManager.shoot())\n  shoot.addEventListener('touchend', () => inputManager.cancelShoot())\n  shoot.addEventListener('contextmenu', event => {\n    event.preventDefault()\n    return false\n  })\n  EventHandler.registerOnElement(gameOver, events, () => loop.restart())\n  EventHandler.registerOnElement(set, events, () => {\n    settingsMenu.toggleShow()\n    loop.togglePause()\n  })\n  loop.start()\n})\n"],"sourceRoot":""}