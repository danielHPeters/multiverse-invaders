{"version":3,"sources":["webpack:///webpack/bootstrap 73076fdd0a47ce4f39d5","webpack:///./src/lib/math/Point.ts","webpack:///./src/draw/factory/ShapeFactory.ts","webpack:///./src/draw/interfaces/Shape.ts","webpack:///./src/draw/draw.ts","webpack:///./src/draw/gui/DrawingApp.ts","webpack:///./src/draw/gui/MenuBar.ts","webpack:///./src/draw/geometry/Rectangle.ts","webpack:///./src/draw/geometry/Triangle.ts","webpack:///./src/draw/geometry/Circle.ts","webpack:///./src/draw/geometry/Smiley.ts","webpack:///./src/draw/geometry/Line.ts","webpack:///./src/draw/config/Settings.ts","webpack:///./src/draw/tools/ShapeTool.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Point","[object Object]","x","y","this","point","default","Rectangle_1","Triangle_1","Circle_1","Smiley_1","Line_1","ShapeType","shapeType","start","end","color","fill","shape","LINE","RECTANGLE","TRIANGLE","CIRCLE","SMILEY","Error","Color","VALID_COLOR","DrawingApp_1","MenuBar_1","Settings_1","ShapeTool_1","document","addEventListener","canvas","getElementById","context","getContext","menuBar","settings","offsetHeight","menu","tool","addMenu","createEditMenu","createColorMenu","createShapesMenu","createOptionsMenu","init","width","window","innerWidth","height","innerHeight","event","click","move","clearRect","renderAll","tempShape","render","release","Shape_1","ShapeFactory_1","element","submenus","editEntries","menuEntry","createElement","menuLink","setAttribute","toLowerCase","appendChild","createTextNode","classList","add","undo","push","colors","colorEntries","forEach","activeColor","toUpperCase","colorForm","colorInput","value","tools","toolEntries","activeTool","optionEntries","menuInput","console","log","title","entries","submenu","length","list","entry","beginPath","rect","fillStyle","strokeStyle","stroke","moveTo","lineTo","closePath","radius","Math","abs","arc","PI","menuHeight","BLACK","history","Point_1","create","down","set","clientX","clientY","clone","line","pop"],"mappings":"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","file":"draw.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 36);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 73076fdd0a47ce4f39d5","/**\r\n * Class Representing a Coordinate (x|y) on the canvas.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Point {\r\n  x: number\r\n  y: number\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {number} x initializes x value of this point\r\n   * @param {number} y initializes y value of this point\r\n   */\r\n  constructor (x: number, y: number) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Set both x and y values.\r\n   *\r\n   * @param {number} x x-axis value\r\n   * @param {number} y y-axis value\r\n   */\r\n  public set (x: number, y: number): void {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Set the x and y values of this point to the values of another point.\r\n   *\r\n   * @param {Point} point Other point\r\n   */\r\n  public setPoint (point: Point): void {\r\n    this.x = point.x\r\n    this.y = point.y\r\n  }\r\n\r\n  /**\r\n   * Create a another Point object with the same value as this Point.\r\n   *\r\n   * @returns {Point} A clone of this point\r\n   */\r\n  public clone (): Point {\r\n    return new Point(this.x, this.y)\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/math/Point.ts","import Shape, { Color } from '../interfaces/Shape'\r\nimport Point from '../../lib/math/Point'\r\nimport Rectangle from '../geometry/Rectangle'\r\nimport Triangle from '../geometry/Triangle'\r\nimport Circle from '../geometry/Circle'\r\nimport Smiley from '../geometry/Smiley'\r\nimport Line from '../geometry/Line'\r\n\r\nexport enum ShapeType {\r\n  LINE, RECTANGLE, TRIANGLE, CIRCLE, SMILEY\r\n}\r\n\r\n/**\r\n * Factory class for generating shapes.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class ShapeFactory {\r\n  /**\r\n   * Generate a specified shape object.\r\n   *\r\n   * @param {ShapeType} shapeType Type of the shape\r\n   * @param {Point} start Starting location\r\n   * @param {Point} end End location\r\n   * @param {Color} color Drawing color\r\n   * @param {boolean} fill Flag determining whether the shape should be filled\r\n   * @returns {Shape} The generated shapes\r\n   */\r\n  static create (shapeType: ShapeType, start: Point, end: Point, color: Color, fill: boolean): Shape {\r\n    let shape\r\n    switch (shapeType) {\r\n      case ShapeType.LINE:\r\n        shape = new Line(start, end, color, fill)\r\n        break\r\n      case ShapeType.RECTANGLE:\r\n        shape = new Rectangle(start, end, color, fill)\r\n        break\r\n      case ShapeType.TRIANGLE:\r\n        shape = new Triangle(start, end, color, fill)\r\n        break\r\n      case ShapeType.CIRCLE:\r\n        shape = new Circle(start, end, color, fill)\r\n        break\r\n      case ShapeType.SMILEY:\r\n        shape = new Smiley(start, end, color, fill)\r\n        break\r\n      default:\r\n        throw new Error('Invalid Shape Type!')\r\n    }\r\n    return shape\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/factory/ShapeFactory.ts","import Point from '../../lib/math/Point'\r\n\r\n/**\r\n * Basic hex-color enum.\r\n */\r\nexport enum Color {\r\n  RED = '#FF0000',\r\n  GREEN = '#00FF00',\r\n  BLUE = '#0000FF',\r\n  YELLOW = '#FFFF00',\r\n  BLACK = '#000000'\r\n}\r\n\r\n/**\r\n * Regex for verifying hex-color formats.\r\n * Valid formats are: #000 or #000000.\r\n *\r\n * @type {string}\r\n */\r\nexport const VALID_COLOR = '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'\r\n\r\n/**\r\n * Interface for drawing shapes.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default interface Shape {\r\n  start: Point\r\n  end: Point\r\n  color: Color\r\n  fill: boolean\r\n\r\n  /**\r\n   * Draws the shape onto the canvas.\r\n   *\r\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\r\n   */\r\n  render (context: CanvasRenderingContext2D): void\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/interfaces/Shape.ts","import DrawingApp from './gui/DrawingApp'\r\nimport MenuBar from './gui/MenuBar'\r\nimport Settings from './config/Settings'\r\nimport ShapeTool from './tools/ShapeTool'\r\n\r\n/**\r\n * Entry script of the web application.\r\n * Initializes the drawing context and the menu bar.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const canvas = document.getElementById('pane') as HTMLCanvasElement\r\n  const context = canvas.getContext('2d')\r\n  const menuBar = document.getElementById('menuBar') as HTMLElement\r\n  const settings = new Settings(menuBar.offsetHeight)\r\n  const menu = new MenuBar(menuBar)\r\n  const tool = new ShapeTool(settings)\r\n\r\n  menu.addMenu('File')\r\n  menu.addMenu('Edit', MenuBar.createEditMenu(settings, tool, context, canvas))\r\n  menu.addMenu('Color', MenuBar.createColorMenu(settings))\r\n  menu.addMenu('Shapes', MenuBar.createShapesMenu(settings))\r\n  menu.addMenu('Options', MenuBar.createOptionsMenu(settings))\r\n  menu.addMenu('Help')\r\n  new DrawingApp(canvas, menuBar, context, tool).init()\r\n})\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/draw.ts","import Tool from '../interfaces/Tool'\r\n\r\n/**\r\n * Main application class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class DrawingApp {\r\n  private menuBar: HTMLElement\r\n  private canvas: HTMLCanvasElement\r\n  private context: CanvasRenderingContext2D\r\n  private tool: Tool\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas Main drawing canvas\r\n   * @param {HTMLElement} menuBar menu Bar HTML element that displays options and tools\r\n   * @param {CanvasRenderingContext2D} context The context of the main canvas\r\n   * @param {Tool} tool Drawing tool\r\n   */\r\n  constructor (canvas: HTMLCanvasElement, menuBar: HTMLElement, context: CanvasRenderingContext2D, tool: Tool) {\r\n    this.menuBar = menuBar\r\n    this.canvas = canvas\r\n    this.canvas.width = window.innerWidth\r\n    this.canvas.height = window.innerHeight - this.menuBar.offsetHeight\r\n    this.context = context\r\n    this.tool = tool\r\n  }\r\n\r\n  /**\r\n   * Initialize the mouse events.\r\n   */\r\n  public init (): void {\r\n    this.canvas.addEventListener('mousedown', event => this.tool.click(event))\r\n    this.canvas.addEventListener('mousemove', event => {\r\n      this.tool.move(event)\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n      this.tool.renderAll(this.context)\r\n      this.tool.tempShape.render(this.context)\r\n    })\r\n    this.canvas.addEventListener('mouseup', event => {\r\n      this.tool.release(event)\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n      this.tool.renderAll(this.context)\r\n    })\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/gui/DrawingApp.ts","import { Color, VALID_COLOR } from '../interfaces/Shape'\r\nimport { ShapeType } from '../factory/ShapeFactory'\r\nimport Tool from '../interfaces/Tool'\r\nimport Settings from '../config/Settings'\r\n\r\n/**\r\n * Menu bar at the top of the web app.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class MenuBar {\r\n  private element: HTMLElement\r\n  private submenus: HTMLElement[]\r\n\r\n  /**\r\n   *\r\n   * @param {HTMLElement} element\r\n   */\r\n  constructor (element: HTMLElement) {\r\n    this.element = element\r\n    this.submenus = []\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Settings} settings\r\n   * @param {Tool} tool\r\n   * @param {CanvasRenderingContext2D} context\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  static createEditMenu (settings: Settings, tool: Tool, context: CanvasRenderingContext2D, canvas: HTMLCanvasElement): HTMLElement[] {\r\n    const editEntries = []\r\n    const entryText = 'Undo'\r\n    const menuEntry = document.createElement('li') as HTMLElement\r\n    const menuLink = document.createElement('a')\r\n    menuLink.setAttribute('href', '#')\r\n    menuLink.setAttribute('id', entryText.toLowerCase())\r\n    menuLink.appendChild(document.createTextNode(entryText))\r\n    menuEntry.appendChild(menuLink)\r\n    menuEntry.classList.add('menuEntry')\r\n    menuEntry.addEventListener('click', () => {\r\n      tool.undo(context, canvas.width, canvas.height)\r\n    })\r\n    editEntries.push(menuEntry)\r\n    return editEntries\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Settings} settings\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  static createColorMenu (settings: Settings): HTMLElement[] {\r\n    const colors = ['Red', 'Black', 'Blue', 'Yellow']\r\n    const colorEntries = []\r\n    colors.forEach(color => {\r\n      const menuEntry = document.createElement('li') as HTMLElement\r\n      const menuLink = document.createElement('a')\r\n      menuLink.setAttribute('href', '#')\r\n      menuLink.setAttribute('id', color.toLowerCase())\r\n      menuLink.appendChild(document.createTextNode(color))\r\n      menuEntry.appendChild(menuLink)\r\n      menuEntry.classList.add('menuEntry')\r\n      menuEntry.addEventListener('click', () => {\r\n        settings.activeColor = Color[color.toUpperCase()]\r\n      })\r\n      colorEntries.push(menuEntry)\r\n    })\r\n\r\n    const colorForm = document.createElement('form')\r\n    const colorInput = document.createElement('input') as HTMLInputElement\r\n    colorInput.setAttribute('type', 'color')\r\n    colorInput.setAttribute('accept', VALID_COLOR)\r\n    colorInput.addEventListener('change', () => {\r\n      settings.activeColor = colorInput.value\r\n    })\r\n    colorForm.appendChild(colorInput)\r\n    colorForm.classList.add('menuEntry')\r\n    colorEntries.push(colorForm)\r\n    return colorEntries\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param settings\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  static createShapesMenu (settings): HTMLElement[] {\r\n    const tools = ['Line', 'Rectangle', 'Triangle', 'Circle', 'Smiley']\r\n    const toolEntries = []\r\n    tools.forEach(shape => {\r\n      const menuEntry = document.createElement('li') as HTMLElement\r\n      const menuLink = document.createElement('a')\r\n      menuLink.setAttribute('href', '#')\r\n      menuLink.setAttribute('id', shape.toLowerCase())\r\n      menuLink.appendChild(document.createTextNode(shape))\r\n      menuEntry.appendChild(menuLink)\r\n      menuEntry.classList.add('menuEntry')\r\n      menuEntry.addEventListener('click', () => {\r\n        settings.activeTool = ShapeType[shape.toUpperCase()]\r\n      })\r\n      toolEntries.push(menuEntry)\r\n    })\r\n    return toolEntries\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Settings} settings\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  static createOptionsMenu (settings: Settings): HTMLElement[] {\r\n    const optionEntries = []\r\n    const entryText = 'Fill'\r\n    const menuEntry = document.createElement('li') as HTMLElement\r\n    const menuInput = document.createElement('input')\r\n    menuInput.setAttribute('type', 'checkbox')\r\n    menuInput.setAttribute('id', entryText.toLowerCase())\r\n    menuEntry.appendChild(document.createTextNode(entryText))\r\n    menuEntry.appendChild(menuInput)\r\n    menuEntry.classList.add('menuEntry')\r\n    menuEntry.addEventListener('click', () => {\r\n      settings.fill = !settings.fill\r\n      console.log(settings.fill)\r\n    })\r\n    optionEntries.push(menuEntry)\r\n    return optionEntries\r\n  }\r\n\r\n  /**\r\n   * Adds a top level menu entry.\r\n   *\r\n   * @param {string} title Display text of the menu and id\r\n   * @param {HTMLElement[]} entries Submenus and submenu entries\r\n   */\r\n  addMenu (title: string, entries: HTMLElement[] = []): void {\r\n    let submenu = document.createElement('li') as HTMLElement\r\n    let menuLink = document.createElement('a')\r\n    menuLink.setAttribute('href', '#')\r\n    menuLink.appendChild(document.createTextNode(title))\r\n    submenu.appendChild(menuLink)\r\n    submenu.classList.add('submenu')\r\n    submenu.setAttribute('id', title.toLowerCase())\r\n    if (entries.length > 0) {\r\n      const list = document.createElement('ul')\r\n      list.classList.add('submenu-content')\r\n      submenu.appendChild(list)\r\n      entries.forEach(entry => {\r\n        list.appendChild(entry)\r\n      })\r\n    }\r\n    this.submenus[title.toLowerCase()] = submenu\r\n    this.element.appendChild(submenu)\r\n  }\r\n\r\n  /**\r\n   * Get a menu by the set id.\r\n   *\r\n   * @param {string} title ID and title text of menu\r\n   * @returns {HTMLElement} The menu element\r\n   */\r\n  getMenu (title: string): HTMLElement {\r\n    return this.submenus.hasOwnProperty(title.toLowerCase()) ? this.submenus[title.toLowerCase()] : null\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/gui/MenuBar.ts","import Point from '../../lib/math/Point'\r\nimport Shape, { Color } from '../interfaces/Shape'\r\n\r\n/**\r\n * Rectangle shape to be drawn on a canvas.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Rectangle implements Shape {\r\n  start: Point\r\n  end: Point\r\n  color: Color\r\n  fill: boolean\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {Point} start Starting point of this shape\r\n   * @param {Point} end Ending point of this shape\r\n   * @param {Color} color The color of this shape\r\n   * @param {boolean} fill Flag determining whether this shape should be filled\r\n   */\r\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\r\n    this.start = start\r\n    this.end = end\r\n    this.color = color\r\n    this.fill = fill\r\n  }\r\n\r\n  /**\r\n   * Draw this rectangle on the canvas.\r\n   *\r\n   * @param {CanvasRenderingContext2D} context Drawing context\r\n   */\r\n  render (context: CanvasRenderingContext2D): void {\r\n    context.beginPath()\r\n    context.rect(this.start.x, this.start.y, this.end.x - this.start.x, this.end.y - this.start.y)\r\n    if (this.fill) {\r\n      context.fillStyle = this.color\r\n      context.fill()\r\n    } else {\r\n      context.strokeStyle = this.color\r\n      context.stroke()\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/geometry/Rectangle.ts","import Shape, { Color } from '../interfaces/Shape'\r\nimport Point from '../../lib/math/Point'\r\n\r\n/**\r\n * Triangle shape to be drawn on a canvas object.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Triangle implements Shape {\r\n  start: Point\r\n  end: Point\r\n  color: Color\r\n  fill: boolean\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {Point} start Starting point of this shape\r\n   * @param {Point} end Ending point of this shape\r\n   * @param {Color} color The color of this shape\r\n   * @param {boolean} fill Flag determining whether this shape should be filled\r\n   */\r\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\r\n    this.start = start\r\n    this.end = end\r\n    this.color = color\r\n    this.fill = fill\r\n  }\r\n\r\n  /**\r\n   * Draw the triangle onto the canvas.\r\n   *\r\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\r\n   */\r\n  render (context: CanvasRenderingContext2D): void {\r\n    context.beginPath()\r\n    context.strokeStyle = this.color\r\n    context.fillStyle = this.color\r\n    context.moveTo(this.start.x, this.start.y)\r\n    context.lineTo(this.start.x, this.end.y)\r\n    context.lineTo(this.end.x, this.start.y)\r\n    context.closePath()\r\n    if (this.fill) {\r\n      context.fill()\r\n    } else {\r\n      context.stroke()\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/geometry/Triangle.ts","import Shape, { Color } from '../interfaces/Shape'\r\nimport Point from '../../lib/math/Point'\r\n\r\n/**\r\n * Circle shape to be drawn on a canvas.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Circle implements Shape {\r\n  start: Point\r\n  end: Point\r\n  color: Color\r\n  fill: boolean\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {Point} start Starting point of this shape\r\n   * @param {Point} end Ending point of this shape\r\n   * @param {Color} color The color of this shape\r\n   * @param {boolean} fill Flag determining whether this shape should be filled\r\n   */\r\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\r\n    this.start = start\r\n    this.end = end\r\n    this.color = color\r\n    this.fill = fill\r\n  }\r\n\r\n  /**\r\n   * Draws the circle on a canvas.\r\n   *\r\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\r\n   */\r\n  render (context: CanvasRenderingContext2D): void {\r\n    const radius = Math.abs(this.end.x - this.start.x)\r\n    if (radius !== 0) {\r\n      context.beginPath()\r\n      context.strokeStyle = this.color\r\n      context.arc(this.start.x, this.start.y, radius, 0, Math.PI * 2, true)\r\n      if (this.fill) {\r\n        context.fillStyle = this.color\r\n        context.fill()\r\n      } else {\r\n        context.stroke()\r\n      }\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/geometry/Circle.ts","import Shape, { Color } from '../interfaces/Shape'\r\nimport Point from '../../lib/math/Point'\r\n\r\n/**\r\n * Smiley Shape to draw on the canvas element.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Smiley implements Shape {\r\n  start: Point\r\n  end: Point\r\n  color: Color\r\n  fill: boolean\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {Point} start Starting point of this shape\r\n   * @param {Point} end Ending point of this shape\r\n   * @param {Color} color The color of this shape\r\n   * @param {boolean} fill Flag determining whether this shape should be filled\r\n   */\r\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\r\n    this.start = start\r\n    this.end = end\r\n    this.color = color\r\n    this.fill = fill\r\n  }\r\n\r\n  /**\r\n   * Draw the Smiley onto the canvas.\r\n   *\r\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\r\n   */\r\n  render (context: CanvasRenderingContext2D): void {\r\n    const radius = Math.abs(this.end.x - this.start.x)\r\n    context.beginPath()\r\n    context.strokeStyle = this.color\r\n    context.arc(this.start.x, this.start.y, radius, 0, Math.PI * 2, true) // Outer circle\r\n    context.moveTo(this.start.x + (radius * 0.7), this.start.y)\r\n    context.arc(this.start.x, this.start.y, radius * 0.7, 0, Math.PI, false)  // Mouth (clockwise)\r\n    context.moveTo(this.start.x - (radius * 0.3) + radius * 0.1, this.start.y - (radius * 0.2))\r\n    context.arc(this.start.x - (radius * 0.3), this.start.y - (radius * 0.2), radius * 0.1, 0, Math.PI * 2, false)  // Left eye\r\n    context.moveTo(this.start.x + (radius * 0.3) + radius * 0.1, this.start.y - (radius * 0.2))\r\n    context.arc(this.start.x + (radius * 0.3), this.start.y - (radius * 0.2), radius * 0.1, 0, Math.PI * 2, true)  // Right eye\r\n    context.stroke()\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/geometry/Smiley.ts","import Point from '../../lib/math/Point'\r\nimport Shape, { Color } from '../interfaces/Shape'\r\n\r\n/**\r\n * Line shape to be drawn on a canvas element.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Line implements Shape {\r\n  start: Point\r\n  end: Point\r\n  color: Color\r\n  fill: boolean\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {Point} start Tool start location\r\n   * @param {Point} end Tool release location\r\n   * @param {Color} color Stroke color\r\n   * @param {boolean} fill Flag determining whether the shape should be filled\r\n   */\r\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\r\n    this.start = start\r\n    this.end = end\r\n    this.color = color\r\n    this.fill = fill\r\n  }\r\n\r\n  /**\r\n   * Draw this line on the canvas.\r\n   *\r\n   * @param {CanvasRenderingContext2D} context drawing context\r\n   */\r\n  render (context: CanvasRenderingContext2D): void {\r\n    context.beginPath()\r\n    context.strokeStyle = this.color\r\n    context.moveTo(this.start.x, this.start.y)\r\n    context.lineTo(this.end.x, this.end.y)\r\n    context.stroke()\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/geometry/Line.ts","import { ShapeType } from '../factory/ShapeFactory'\r\nimport Shape, { Color } from '../interfaces/Shape'\r\n\r\n/**\r\n * Default application settings configuration.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Settings {\r\n  activeColor\r\n  activeTool: ShapeType\r\n  menuHeight: number\r\n  history: Shape[]\r\n  fill: boolean\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {number} menuHeight Height of the top menu to calculate the drawing offset\r\n   * @param {Color} activeColor Currently used color for drawing\r\n   * @param {ShapeType} activeTool Currently active shape\r\n   */\r\n  constructor (menuHeight: number, activeColor = Color.BLACK, activeTool = ShapeType.LINE) {\r\n    this.activeColor = activeColor\r\n    this.menuHeight = menuHeight\r\n    this.activeTool = activeTool\r\n    this.history = []\r\n    this.fill = false\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/config/Settings.ts","import Point from '../../lib/math/Point'\r\nimport Settings from '../config/Settings'\r\nimport Tool from '../interfaces/Tool'\r\nimport Shape from '../interfaces/Shape'\r\nimport ShapeFactory from '../factory/ShapeFactory'\r\n\r\n/**\r\n * Tool to draw history on the canvas.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class ShapeTool implements Tool {\r\n  start: Point\r\n  end: Point\r\n  history: Shape[]\r\n  tempShape: Shape\r\n  settings: Settings\r\n  down: boolean\r\n\r\n  /**\r\n   * Default constructor.\r\n   *\r\n   * @param {Settings} settings Application settings\r\n   */\r\n  constructor (settings: Settings) {\r\n    this.start = new Point(0, 0)\r\n    this.end = new Point(0, 0)\r\n    this.history = settings.history\r\n    this.settings = settings\r\n    this.tempShape = ShapeFactory.create(this.settings.activeTool, this.start, this.end, this.settings.activeColor, this.settings.fill)\r\n    this.down = false\r\n  }\r\n\r\n  /**\r\n   * Mouse down event handler.\r\n   * Starts the temporary drawing of a shape.\r\n   *\r\n   * @param event Mouse click event\r\n   */\r\n  click (event): void {\r\n    this.down = true\r\n    this.start.set(event.clientX, event.clientY - this.settings.menuHeight)\r\n  }\r\n\r\n  /**\r\n   * Mouse drag event while holding down the mouse.\r\n   * Used for drawing the temporary history.\r\n   *\r\n   * @param event Mouse move event\r\n   */\r\n  move (event): void {\r\n    if (!this.down) return\r\n    this.tempShape = ShapeFactory.create(this.settings.activeTool, this.start, this.end, this.settings.activeColor, this.settings.fill)\r\n    this.tempShape.end.set(event.clientX, event.clientY - this.settings.menuHeight)\r\n  }\r\n\r\n  /**\r\n   * Event handler for when the mouse is released.\r\n   * Adds the temporary shape to the list of drawn history.\r\n   *\r\n   * @param event Mouse release event\r\n   */\r\n  release (event): void {\r\n    this.end.set(event.clientX, event.clientY - this.settings.menuHeight)\r\n    this.history.push(ShapeFactory.create(this.settings.activeTool, this.start.clone(), this.end.clone(), this.settings.activeColor, this.settings.fill))\r\n    this.down = false\r\n  }\r\n\r\n  /**\r\n   * Draw all shapes on the canvas.\r\n   * @param context Canvas rendering context\r\n   */\r\n  renderAll (context): void {\r\n    this.history.forEach(line => line.render(context))\r\n  }\r\n\r\n  /**\r\n   * Undo the drawing of the last shape by removing the last shape from the history and redrawing the canvas.\r\n   *\r\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\r\n   * @param {number} width Canvas width used to clear the whole canvas\r\n   * @param {number} height Canvas height used to clear the whole canvas\r\n   */\r\n  undo (context: CanvasRenderingContext2D, width: number, height: number): void {\r\n    if (this.history.length > 0) {\r\n      context.clearRect(0, 0, width, height)\r\n      this.tempShape.start.set(0, 0)\r\n      this.tempShape.end.set(0, 0)\r\n      this.history.pop()\r\n      this.renderAll(context)\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/draw/tools/ShapeTool.ts"],"sourceRoot":""}